<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Notebook</title>
  <subtitle>Exploring with Curiosity!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xijunlee.github.io/"/>
  <updated>2018-03-14T14:03:45.719Z</updated>
  <id>https://xijunlee.github.io/</id>
  
  <author>
    <name>Xijun LI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Many Tribes of Artificial Intelligence [repost]</title>
    <link href="https://xijunlee.github.io/2018/03/14/tribe-of-ai/"/>
    <id>https://xijunlee.github.io/2018/03/14/tribe-of-ai/</id>
    <published>2018-03-14T13:51:12.000Z</published>
    <updated>2018-03-14T14:03:45.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>I found an interesting article discussing the different “tribe” in the field of AI, which could help us understand further the distinction and similarity of these tribes. Thus, I repo this article.</p>
<h2 id="The-Article"><a href="#The-Article" class="headerlink" title="The Article"></a>The Article</h2><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/tribe_of_ai/fig1.jpg">
<a id="more"></a>
<p>One of the biggest confusions about “Artificial Intelligence” is that it is a very vague term. That’s because Artificial Intelligence or AI is a term that was coined way back in 1955 with extreme hubris:</p>
<p>We propose that a 2 month, 10 man study of artificial intelligence be carried out during the summer of 1956 at Dartmouth College in Hanover, New Hampshire.<br>The study is to proceed on the basis of the conjecture that every aspect of learning or any other feature of intelligence can in principle be so precisely described that a machine can be made to simulate it. An attempt will be made to find how to make machines use language, form abstractions, and concepts, solve kinds of problems now reserved for humans, and improve themselves. - Dartmouth AI Project Proposal; J. McCarthy et al.; Aug. 31, 1955.</p>
<p>AI is over half a century old and carries with it too much baggage. For a very long time, AI was dominated by Symbolists, that is rule-based systems that had “Zero Learning”. In the 1980’s a new kind of AI began to emerge, we termed this Machine Learning. Finally, we had at least “Simple Learning”. The big disruption, however, occurred this decade, when we stumbled upon “Deep Learning” and ever since it has been taking no prisoners.</p>
<p>This is, of course, a grossly simplified history of AI. There are actually many different approaches or tribes in AI. Pedro Domingo’s in his book, the Master Algorithm, talks about five different “tribes”. Not to be outdone, A YCombinator user “solidrocketfuel” posts about at least “21 different cultures”.<br>It is important for anyone that plans on doing AI to understand that there are differences in the approaches of the different tribes of AI. AI is not a homogenous field, but rather a field in constant tribal warfare. Here’s an overview:</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/tribe_of_ai/fig2.jpg">
<p>And a quick breakdown:</p>
<p><strong>Symbolists</strong> — Folks who used symbolic rule-based systems to make inferences. Most of AI has revolved around this approach. The approaches that used Lisp and Prolog are in this group, as well as the SemanticWeb, RDF, and OWL. One of the most ambitious attempts at this is Doug Lenat’s Cyc that he started back in the 80’s, where he has attempted to encode in logic rules all that we understand about this world. The major flaw is the brittleness of this approach, one always seems to find edge cases where one’s rigid knowledge base doesn’t seem to apply. Reality just seems to have this kind of fuzziness and uncertainty that is inescapable. It is like playing an endless game of Whack-a-mole.<br>Evolutionists- Folks who apply evolutionary processes like crossover and mutation to arrive at emergent intelligent behavior. This approach is typically known as Genetic Algorithms. We do see GA techniques used in replacement of a gradient descent approach in Deep Learning, so it’s not a approach that lives in isolation. Folks in this tribe also study cellular automata such as Conway’s Game of Life [CON] and Complex Adaptive Systems (CAS).</p>
<p><strong>Bayesians</strong> — Folks who use probabilistic rules and their dependencies to make inferences. Probabilistic Graph Models (PGMs) are a generalization of this approach and the primary computational mechanism is the Monte-Carlo method for sampling distributions. The approach has some similarity with the Symbolist approach in that there is a way to arrive at an explanation of the results. One other advantage of this approach is that there is a measure of uncertainty that can be expressed in the results. Edward is one library that mixes this approach with Deep Learning.<br>Kernel Conservatives — One of the most successful methods prior to the dominance of Deep Learning was SVM. Yann LeCun calls this glorified template matching. There is what is called a kernel trick that makes an otherwise non-linear separation problem into one that is linear. Practitioners in this field live in delight over the mathematical elegance of their approach. They believe the Deep Learners are nothing but alchemists conjuring up spells without the vaguest of understanding of the consequences.</p>
<p><strong>Tree Huggers</strong> — Folks who use tree-based models such as Random Forests and Gradient Boosted Decision Trees. These are essentially a tree of logic rules that slice up the domain recursively to build a classifier. This approach has actually been pretty effective in many Kaggle competitions. Microsoft has an approach that melds the tree based models with Deep Learning.</p>
<p><strong>Connectionists</strong> — Folks who believe that intelligent behavior arises from simple mechanisms that are highly interconnected. The first manifestation of this were Perceptrons back in 1959. This approach died and resurrected a few times since then. The latest incarnation is Deep Learning.<br>There are many sub-approaches under Deep Learning. This includes:<br>The Canadian Conspirators — Hinton, LeCun, Bengio et al. End-to-end deep learning without manual feature engineering.<br>Swiss Posse — Basically LSTM and that consciousness has been solved by two cooperating RNNs. This posse will have you lynched if you ever claim that you invented something before they did. GANs, the “coolest thing in the last 20 years” according to LeCun are also claimed to be invented by the posse.</p>
<p><strong>British AlphaGoist</strong> — Conjecture that AI = Deep Learning + Reinforcement Learning, despite LeCun’s claim that it is just the cherry on the cake. DeepMind is one of the major proponents in this area.</p>
<p><strong>Predictive Learners</strong> — I’m using the term Yann LeCun conjured up to describe unsupervised learning. The cake of AI or the dark matter of AI. This is a major unsolved area of AI. I, however, tend to believe that the solution is in “Meta-Learning”.<br>In addition to the above mainstream approaches, we also have:</p>
<p><strong>Compressionists</strong> — Cognition and learning are compression (Actually an idea that is shared by other tribes). The origins of Information theory derives from an argument about compression. This is a universal concept that it is more powerful than the all too often abused tool of aggregate statistics.</p>
<p><strong>Complexity Theorists</strong>- Employ methods coming from physics, energy-based models, complexity theory, chaos theory and statistical mechanics. Swarm AI likely fits into this category. If there’s any group that has a chance at coming up with a good explanation why Deep Learning works, then it is likely this group.</p>
<p><strong>Fuzzy Logicians</strong> — This approach was once quite popular, but for some reason, I haven’t heard much about it as of late. One would think that there would be a little more interest here considering the success of the also ‘fuzzy’ approach of Deep Learning. There was a recently published result that showed the use of Fuzzy rules defeating a fighter pilot in a mock dogfight.<br>Biological Inspirationalists — Folks who create models that are closer to what neurons appear in biology. Examples are the Numenta folks and the Spike-and-Integrate folks like IBM’s TrueNorth chip.</p>
<p><strong>Connectomeist</strong> — Folks who believe that the interconnection of the brain (i.e. Connectome) is where intelligence comes from. There’s a project that is trying to replicate a virtual worm and there is some ambitious heavily funded research [HCP] that is trying to map the brain in this way.<br>Information Integration Theorists — Argue that consciousness emerges from some internal imagination of machines that mirrors the causality of reality. The motivation of this group is that if we are ever to understand consciousness then we have to at least start thinking about it! I, however, can’t see the relationship of learning and consciousness in their approach. It is possible that they aren’t related at all! That’s maybe why we need sleep.<br><strong>PAC Theorists</strong> — Are folks that don’t really want to discuss Artificial Intelligence, rather prefer just studying intelligence because at least they know it exists! Their whole idea is that adaptive systems perform computation expediently such that they are all probably approximately correct. In short, intelligence does not have the luxury of massive computation.</p>
<p>In summary, there really is a bewildering array of alternative approaches to AI. I am certain that there are other approaches that I have missed. Some approaches are in opposition to each other, while other can be used together synergistically. However, what I want to point out is that a bit of an understanding of what is out there can help you navigate this space.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h2&gt;&lt;p&gt;I found an interesting article discussing the different “tribe” in the field of AI, which could help us understand further the distinction and similarity of these tribes. Thus, I repo this article.&lt;/p&gt;
&lt;h2 id=&quot;The-Article&quot;&gt;&lt;a href=&quot;#The-Article&quot; class=&quot;headerlink&quot; title=&quot;The Article&quot;&gt;&lt;/a&gt;The Article&lt;/h2&gt;&lt;img src=&quot;http://xijun-album.oss-cn-hangzhou.aliyuncs.com/tribe_of_ai/fig1.jpg&quot;&gt;
    
    </summary>
    
    
      <category term="AI" scheme="https://xijunlee.github.io/tags/AI/"/>
    
      <category term="repost" scheme="https://xijunlee.github.io/tags/repost/"/>
    
  </entry>
  
  <entry>
    <title>2018: Beginning of Career</title>
    <link href="https://xijunlee.github.io/2018/02/23/2018-Career-Begins/"/>
    <id>https://xijunlee.github.io/2018/02/23/2018-Career-Begins/</id>
    <published>2018-02-23T09:13:22.000Z</published>
    <updated>2018-02-24T03:16:13.400Z</updated>
    
    <content type="html"><![CDATA[<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/musk%20starring.png">
<p>It is a new beginning of my life that I will start my career in 2018. May I keep curiosity and passion for exploring the future, just like Musk insisting on his rocket dream.</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://xijun-album.oss-cn-hangzhou.aliyuncs.com/musk%20starring.png&quot;&gt;
&lt;p&gt;It is a new beginning of my life that I will start my car
    
    </summary>
    
    
      <category term="Dairy" scheme="https://xijunlee.github.io/tags/Dairy/"/>
    
  </entry>
  
  <entry>
    <title>AlphaGo Zero科普之从一无所知到也能吹水（下篇）</title>
    <link href="https://xijunlee.github.io/2017/11/05/Zero2/"/>
    <id>https://xijunlee.github.io/2017/11/05/Zero2/</id>
    <published>2017-11-05T14:42:12.000Z</published>
    <updated>2017-11-25T08:16:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>上篇介绍了Alpha Go的两个最主要的组件：卷积神经网络和蒙特卡洛树搜索。这篇开始进入正题，但在介绍AlphaGo Zero之前，我会先介绍其前身Alpha Go。因为这二者从本质上是一样的，只是前者在网络架构稍许不一样。我觉得先弄懂了Alpha Go之后，再看AlphaGo Zero的优化会有一种理所当然的感觉。</p>
<h2 id="Alpha-Go"><a href="#Alpha-Go" class="headerlink" title="Alpha Go"></a>Alpha Go</h2><p>这里开始进入正题了，有了对蒙特卡洛树搜索和卷积神经网络的初步认识，我觉得就比较容易理解Alpha Go的本质了。本节分为三个小节，分别是策略网络(Policy Network)，价值网络(Value Network)以及与前两个网络融合的蒙特卡洛树搜索。</p>
<a id="more"></a>
<h3 id="监督学习下的策略网络-Supervised-Learning-Policy-Network"><a href="#监督学习下的策略网络-Supervised-Learning-Policy-Network" class="headerlink" title="监督学习下的策略网络 Supervised Learning Policy Network"></a>监督学习下的策略网络 Supervised Learning Policy Network</h3><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG122.png">
<p>这里的监督学习策略网络p_sigma就是之前提到的学习人类棋手下棋风格的卷积神经网络。Deepmind的研究人员收集了大量的职业棋手的棋谱$(\vec{s},\vec{a})$后，利用随机梯度下降方法训练出了p_sigma。该网络的输入是Deepmind按照围棋规则和他们自己的理解构造的人工特征，详见下图，共有48个特征，每个特征是$19\times 19$的矩阵。因此该网络的输入$\vec{s}$是$19\times 19\times 48$的。然后输出是一个落子概率向量$\vec{a}$，即在每个合法位置落子的概率。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG123.png">
<p>虽然p_sigma能比较精确地模拟人类棋手的下期风格，但是因为网络结果比较复杂，网络每次计算时间比较长。为了能在后续的蒙特卡洛树搜索中能实现快速走子，Deepmind又训练了一个结构相对简单的快速走子网络(Rollout Network)p_pi。p_pi使用了更少的特征，结构相对p_sigma更简单，因此p_pi会算的更快但是算的没有p_sigma精确。</p>
<h3 id="强化学习下的策略网络-Reinforcement-Learning-Policy-Network"><a href="#强化学习下的策略网络-Reinforcement-Learning-Policy-Network" class="headerlink" title="强化学习下的策略网络 Reinforcement Learning Policy Network"></a>强化学习下的策略网络 Reinforcement Learning Policy Network</h3><p>先稍微简单介绍下强化学习。</p>
<blockquote>
<p>强化学习是一类算法, 是让计算机实现从一开始什么都不懂, 脑袋里没有一点想法, 通过不断地尝试, 从错误中学习, 最后找到规律, 学会了达到目的的方法. 这就是一个完整的强化学习过程. 实际中的强化学习例子有很多. 比如近期最有名的 Alpha go, 机器头一次在围棋场上战胜人类高手, 让计算机自己学着玩经典游戏 Atari, 这些都是让计算机在不断的尝试中更新自己的行为准则, 从而一步步学会如何下好围棋, 如何操控游戏得到高分. 既然要让计算机自己学, 那计算机通过什么来学习呢?原来计算机也需要一位虚拟的老师, 这个老师比较吝啬, 他不会告诉你如何移动, 如何做决定, 他为你做的事只有给你的行为打分, 那我们应该以什么形式学习这些现有的资源, 或者说怎么样只从分数中学习到我应该怎样做决定呢? 很简单, 我只需要记住那些高分, 低分对应的行为, 下次用同样的行为拿高分, 并避免低分的行为.比如老师会根据我的开心程度来打分, 我开心时, 可以得到高分, 我不开心时得到低分. 有了这些被打分的经验, 我就能判断为了拿到高分, 我应该选择一张开心的脸, 避免选到伤心的脸. 这也是强化学习的核心思想. 可以看出在强化学习中, 一种行为的分数是十分重要的. 所以强化学习具有分数导向性. 我们换一个角度来思考.这种分数导向性好比我们在监督学习中的正确标签.</p>
</blockquote>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG124.png">
<p>这样子大家应该对强化学习有一个感性的认知了。AlphaGo在构造好了监督学习下的策略网络后，就开始利用强化学习来提升策略网络的棋力了，记这个强化学习的策略网络为p_rho。p_rho在输入、输出和网络结构上与p_sigma可谓是完全一样。初始化时,p_rho的参数就等于p_sigma。之后该网络p_rho利用自我博弈和策略梯度强化学更新其参数，以提升其棋力。实验证明p_rho的棋力确实是要高于p_sigma的。这意味着强化学习网络青出于蓝而胜于蓝；这意味着强化学习网络从人类老师那里学到了围棋知识后，通过自我对弈学到了更多的围棋知识。</p>
<h3 id="价值网络-Value-Network"><a href="#价值网络-Value-Network" class="headerlink" title="价值网络 Value Network"></a>价值网络 Value Network</h3><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG125.png">
<p>Alpha Go中还构造了一个网络，即价值网络v。该网络的用途是给定一个棋局局面$\vec{s}$，立马根据$\vec{s}$输出我赢棋的概率$v$。</p>
<p>价值网络v的训练方法依旧是强化学习。更细一点说明如下：</p>
<p>1.针对棋局局面$\vec{s}$，不断利用强化策略网络p_rho进行自我对弈一直下棋到最后，就会得到一个输赢结果$z=+1$或者$z=-1$。其中1表示黑子赢棋，-1表示白子赢棋；<br>2.不断执行上一步骤，就能得到一系列的$(\vec{s},z)$对了。将这些$(\vec{s},z)$对作为训练数据来训练价值网络v。</p>
<h3 id="“融合”的蒙特卡洛树搜索"><a href="#“融合”的蒙特卡洛树搜索" class="headerlink" title="“融合”的蒙特卡洛树搜索"></a>“融合”的蒙特卡洛树搜索</h3><p>训练好了上述所有网络后，我们现在就已经万事具备了。上述的这些网络都是需要提前训练好的，这个训练过程的时间是非常漫长的，但是训练好之后就可以立马使用。不过，如果只单纯用策略网络去跟人下棋的话，一般是会被人类玩家虐的，因为这样的策略还是太简单了。所以，需要将上述网络与蒙特卡洛树搜索进行结合。下图正是Alpha Go中将策略网络和价值网络融合到蒙特卡洛树搜索的架构与算法流程：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG126.png">
<p>首先，认识一下这个树结构。</p>
<p>树中的节点表示棋局中的一个局面$\vec{s}$，每个点的状态可以使用价值网络v进行评判其赢棋概率$v$。</p>
<p>每条边$(\vec{s},\vec{a})$表示基于某个局面$\vec{s}$的落子决策，每条边还存储三个状态$P(\vec{s},\vec{a})$，$N(\vec{s},\vec{a})$，$Q(\vec{s},\vec{a})$。$P(\vec{s},\vec{a})$是由策略网络p_sigma得到，表示基于当前状态$\vec{s}$下，采取策略$\vec{a}$的概率。$N(\vec{s},\vec{a})$表示经过边$(\vec{s},\vec{a})$的次数。$Q(\vec{s},\vec{a})$表示策略值，计算公式见上图。</p>
<p>Alpha Go Zero中的树搜索步骤可以总结为：</p>
<p>1.这个过程的第一步叫选择（Selection）。从根节点往下走，每次都选一个“最值得看的子节点”，直到来到一个“存在未扩展的子节点”的节点。什么叫做“存在未扩展的子节点”，其实就是指这个局面存在未走过的后续着法。选择的依据如上图公式所示。<br>2.第二步叫扩展（Expansion）。对应之前所说的“未扩展的子节点”，就是还没有试过的一个着法。我们利用策略网络p_sigma对其进行扩展，即基于当前局面下给出其所有可能落子位置的概率。<br>3.第三步是模拟（Simluation）。从上面这个没有试过的着法开始，用快速走子策略（Rollout policy）走到底，得到一个胜负结果$z_L$。另一方面，我们还可以利用价值网络v对当前这个局面进行评估，得到赢棋概率$v$。然后将这两个结果进行加权平均，得到一个更加客观的赢棋概率，记为$V$。<br>4.第四步是回溯（Backpropagation）。把模拟的结果更新回它的所有父节点上。这里需要更新的参数有$N(\vec{s},\vec{a})$，$Q(\vec{s},\vec{a})$。</p>
<p>好了，以上就是Alpha Go原理比较完整的概述了，如果大家对细节很感兴趣的话，还是阅读原文最好。</p>
<h2 id="AlphaGo-Zero"><a href="#AlphaGo-Zero" class="headerlink" title="AlphaGo Zero"></a>AlphaGo Zero</h2><h3 id="AlphaGo-Zero与Alpha-Go的不同之处"><a href="#AlphaGo-Zero与Alpha-Go的不同之处" class="headerlink" title="AlphaGo Zero与Alpha Go的不同之处"></a>AlphaGo Zero与Alpha Go的不同之处</h3><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG128.png">
<p>根据我的理解，Zero和之前的Alpha Go的主要差异有三点:</p>
<p>1.Zero采用了新的网络架构。将Alpha Go中的策略网络和价值网络融合成为一个网络，我认为这个想法很自然，因为策略网络和价值网络的输入层和网络隐层的结构完全一样，只不过前者输出落子概率向量，后者输出当前局面的赢棋概率。<br>2.Zero采用了目前最先进的卷积神经网络——深度残差网络(Deep Residual Network)，具体参见<a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="external">论文</a>。残差网络的出现一定程度地缓解了卷积神经网络中的梯度消失的问题，从而使得网络突破深度的瓶颈。换句话说，就是Zero采取的网络升级了，比Alpha Go有更强的学习能力。<br>3.Zero直接用棋盘状态的原始模样作为训练样本。Alpha Go使用了人工构造的特征作为训练样本输入网络，而Zero则是直接用棋盘状态的原始模样作为训练样本输入网络。</p>
<h3 id="AlphaGo-Zero中的强化学习"><a href="#AlphaGo-Zero中的强化学习" class="headerlink" title="AlphaGo Zero中的强化学习"></a>AlphaGo Zero中的强化学习</h3><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG127.png">
<p>Zero将Alpha Go中的策略网络和价值网络融合成为一个网络$f_\theta$。该网络的输入是棋盘当前状态以及前七步状态$\vec{s}$，输出是落子概率向量$\vec{a}$和赢棋概率$v$。</p>
<p>该网络的参数$\theta$是随机初始化的，也就是说没有学习人类知识，完全从零开始，这也是AlphaGo Zero中Zero取名的由来。而参数$\theta$的训练是利用在$f_\theta$指导下的蒙特卡洛树搜索的强化学习完成的。具体的步骤如下:</p>
<p>1.自我博弈(Self-play)。蒙特卡洛树搜索在$f_\theta$的指导下进行自我博弈，直到棋局结束。在这个自我博弈过程中，会得到一系列的棋盘状态$\vec{s}_i$，对应的落子概率向量$\vec{\pi}_i$，以及一个最后的赢棋结果$z$。</p>
<p>2.神经网络训练。利用第一步得到的一系列（棋盘状态，落子概率向量，赢棋结果）的来更新网络参数$\theta$。更新后的网络$f_\theta$又去指导蒙特卡洛树搜索进行自我博弈。</p>
<p>自我博弈和网络训练交替进行，直到网络参数$\theta$收敛为止。这样，我们就能得到一个无比强大的融合网络$f_\theta$。</p>
<h3 id="AlphaGo-Zero中的蒙特卡洛树搜索"><a href="#AlphaGo-Zero中的蒙特卡洛树搜索" class="headerlink" title="AlphaGo Zero中的蒙特卡洛树搜索"></a>AlphaGo Zero中的蒙特卡洛树搜索</h3><p>Zero中的树搜索和Alpha Go中的树搜索在流程和结构上可以说是一模一样，如下图所示，所以就不再赘述了。差异是Zero用了一个融合过后的网络$f_\theta$，这个网络干了Alpha Go中的策略网络和价值网络的活。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG130.png">
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>终于把Alpha Go与AlphaGo Zero系统地梳理了一遍了。不得不感慨Alpha Go以及AlphaGo Zero是科研与工程的极致产物，但也要认识到AlphaGo Zero并没有像媒体吹地那么神，其与真正的智能还是差的很远。最后，我就节选贴上田渊栋最近对于Zero的<a href="https://zhuanlan.zhihu.com/p/30750293?utm_source=wechat_session&amp;utm_medium=social" target="_blank" rel="external">评论</a>，其写得非常到位和客观。</p>
<blockquote>
<p>AlphaGo厉害的地方在于结合了工程和科研两方面的工作，通过大量计算资源和工程优化将一个方向推向了极致，并且同时借鉴了十年来大家在围棋上及在计算机视觉上的点滴进展，围棋和强化学习方向上像蒙特卡罗树搜索，自对弈（俗称“左右互搏”），随机走子盘面估值，用人工特征加浅层网络进行快速走子，权衡广度和深度搜索，权衡从头探索和先验知识，计算机视觉方向上像卷积神经网络（CNN），残差网络（ResNet），旋转翻折样本增强，等等。这些都不是DeepMind团队率先想出来的，而是过去的经验一点点积累起来得到的。只是过去的点滴进步并没有进入公众的视野，而AlphaGo达成了这最后的一步。AlphaGo在业内的影响力并不像在大众中（尤其是国内）那么大。在人工智能领域，每个方法都有优缺点和局限性，没有一种方法是万能的。让在AlphaGo上做出惊人结果的卷积神经网络，早先在计算机视觉上已获得巨大的成功，但让它去拟合含有大量离散特征的广告数据，大家都知道效果不佳；同样左右互搏对其它游戏也有相当不错的效果，但让它去做优化机器翻译，未必有人工标定的数据好。我想主要的问题在于我们之前把围棋这个千年的文化传承神化了，所以现在才有这样大的反弹；若是现在再把AlphaGo神化，那不免又掉进一模一样的圈子里去了。国外对于AlphaGo相比之下要理性很多，在各大论坛上也有更多技术上的深入探讨，而不是陷入玄之又玄的空谈。等到大家有这个实力AlphaGo拆解得七零八落，对它的每个部分都有比较清晰的了解的时候，那我相信它的神秘感，和现在这些疑惑和担扰，也就烟消云散。            — 田渊栋，Facebook人工智能组研究员</p>
</blockquote>
<hr>
<p>Reference<br><a href="https://storage.googleapis.com/deepmind-media/alphago/AlphaGoNaturePaper.pdf" target="_blank" rel="external">https://storage.googleapis.com/deepmind-media/alphago/AlphaGoNaturePaper.pdf</a><br><a href="http://www.nature.com/nature/journal/v550/n7676/full/nature24270.html" target="_blank" rel="external">http://www.nature.com/nature/journal/v550/n7676/full/nature24270.html</a><br><a href="https://charlesliuyx.github.io/2017/10/18/深入浅出看懂AlphaGo元/" target="_blank" rel="external">https://charlesliuyx.github.io/2017/10/18/深入浅出看懂AlphaGo元/</a><br><a href="https://www.zhihu.com/question/39916945/answer/184152952" target="_blank" rel="external">https://www.zhihu.com/question/39916945/answer/184152952</a><br><a href="http://ieeexplore.ieee.org/document/6145622/" target="_blank" rel="external">http://ieeexplore.ieee.org/document/6145622/</a><br><a href="https://zhuanlan.zhihu.com/p/25345778" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/25345778</a><br><a href="https://arxiv.org/abs/1412.6564" target="_blank" rel="external">https://arxiv.org/abs/1412.6564</a><br><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/1-1-A-RL/" target="_blank" rel="external">https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/1-1-A-RL/</a><br><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="external">https://arxiv.org/abs/1512.03385</a><br><a href="https://zhuanlan.zhihu.com/p/30750293?utm_source=wechat_session&amp;utm_medium=social" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/30750293?utm_source=wechat_session&amp;utm_medium=social</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;上篇介绍了Alpha Go的两个最主要的组件：卷积神经网络和蒙特卡洛树搜索。这篇开始进入正题，但在介绍AlphaGo Zero之前，我会先介绍其前身Alpha Go。因为这二者从本质上是一样的，只是前者在网络架构稍许不一样。我觉得先弄懂了Alpha Go之后，再看AlphaGo Zero的优化会有一种理所当然的感觉。&lt;/p&gt;
&lt;h2 id=&quot;Alpha-Go&quot;&gt;&lt;a href=&quot;#Alpha-Go&quot; class=&quot;headerlink&quot; title=&quot;Alpha Go&quot;&gt;&lt;/a&gt;Alpha Go&lt;/h2&gt;&lt;p&gt;这里开始进入正题了，有了对蒙特卡洛树搜索和卷积神经网络的初步认识，我觉得就比较容易理解Alpha Go的本质了。本节分为三个小节，分别是策略网络(Policy Network)，价值网络(Value Network)以及与前两个网络融合的蒙特卡洛树搜索。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CNN" scheme="https://xijunlee.github.io/tags/CNN/"/>
    
      <category term="Reinforcement Learning" scheme="https://xijunlee.github.io/tags/Reinforcement-Learning/"/>
    
      <category term="MCTS" scheme="https://xijunlee.github.io/tags/MCTS/"/>
    
  </entry>
  
  <entry>
    <title>AlphaGo Zero科普之从一无所知到也能吹水（上篇）</title>
    <link href="https://xijunlee.github.io/2017/11/03/Zero/"/>
    <id>https://xijunlee.github.io/2017/11/03/Zero/</id>
    <published>2017-11-03T15:58:38.000Z</published>
    <updated>2017-11-25T08:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>就在上个月的19号，AlphaGo Zero横空出世，号称是没有利用人类棋谱作为指导的AI打败了之前完虐李世石的AlphaGo Lee。这一消息着实轰动，19号这一天朋友圈被刷屏（但大部分还是非业内从业者在转发）。上个礼拜又在做调研，被老板抓去讲AlphaGo Zero。组会后，还是被老板认为讲解地不够直白，不能向更大的老板作报告（更大的老板可是没有AI的背景知识的）。我也慢慢意识到一个好的researcher不仅需要很强的理解能力，更需要极强的表达能力。为了锻炼自己的表达能力，这次博文就从非AI从业者的角度讲解这只有史以来最强的狗，希望同学们读完后也能跟别人吹吹Alpha Go了。</p>
<p>由于内容较多，该水文将分为上下两篇。上篇主要介绍Alpha Go的主要组件。如果你对卷积神经网络和蒙特卡洛树搜索很了解的话，可以跳过上篇。下篇进入正题，将详细介绍Alpha Go和Alpha Go Zero的原理。当然了，所有的讲解都是以非AI从业者的角度出发，不会有晦涩复杂的数学推导。</p>
<p>（主要的材料还是基于组会上的slides，仍旧是以图片的形式，十分抱歉</p>
<a id="more"></a>
<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><p>下图是本文的一个提纲，大致的流程就是：首先是对问题的定义，这里将下围棋的活动定义成数学上的变换。然后分别介绍了AlphaGo的主要构件(building blocks)：蒙特卡洛树搜索(Monte Carlo Tree Search, MCTS)和卷积神经网络(Convolutional Neural Network, CNN)。可以说正是这二者的有效结合构造出了这个有史以来最强的围棋AI，其实想法相当简单，但是如果要弄清楚原理和优化细节还是水很深的。介绍完这两个主要的组件后，就进入了正题。但在介绍AlphaGo Zero之前，我会先介绍其前身Alpha Go。因为这二者从本质上是一样的，只是前者在网络架构稍许不一样。我觉得先弄懂了Alpha Go之后，再看AlphaGo Zero的优化会有一种理所当然的感觉。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG118.png">
<h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG117.png">
<p>首先，我们来将下围棋这么一个活动形式化。</p>
<p>围棋是在一张$19\times 19$的网格上面进行落子的活动，那么围棋的每一个状态都可以用一个$19\times 19$的矩阵$\textbf{X}$表示，矩阵中每一个元素表示对应位置的落子情况，1表示该位置被黑子占领，-1表示该位置被白子占领，0表示该位置是无子的。也可以将该矩阵展平成一个361维的向量$\vec{s}$。类似地，一个落子的决策也可以表示成一个361维的向量$\vec{a}$，因为面对每一个状态$\vec{s}$时总共会有361种落子选择（暂且先不考虑已落子或者其他不合法的落子选择，只是简单地认为有361种落子选择。</p>
<p>下围棋最终的目标是找到一系列的最优决策$\vec{a_1},\vec{a_2},…,\vec{a_n}$，使得我方占领棋盘上最大的地盘（其实我不会下围棋的，围棋规则还是论文调研时稍微看了下，如有不对，请指出）。</p>
<h2 id="蒙特卡洛树搜索-Monte-Carlo-Tree-Search"><a href="#蒙特卡洛树搜索-Monte-Carlo-Tree-Search" class="headerlink" title="蒙特卡洛树搜索 Monte Carlo Tree Search"></a>蒙特卡洛树搜索 Monte Carlo Tree Search</h2><p>对于现在的任何棋类活动，如何评判我当前下的这一步是不是臭棋，回想一下自己下棋的经历。我们是不是通常会在心里预演我下完这一步棋后，对方会怎么下，然后我再怎么下，然后对方再怎么下……厉害的或者有经验的棋手往往能在心里这么预演好几步，据报道柯洁能这么预演5步棋。设想一下，如果在你下棋时，有一个围棋上帝每次都能告诉你这一步下下去后你赢棋的概率有多大，那么你最后的赢棋概率是不是高很多呢？</p>
<p>在计算机科学中，这么个围棋上帝的角色可以通过树搜索(Tree Search)来做到。棋局状态及其落子决策在计算机算法中可以以树的形式表示出来，其中树的节点表示棋局的状态，边表示落子决策。理论上围棋的所有状态和落子决策是可以通过一棵树记录下来。而那个围棋上帝就是探索到这棵围棋树的最底部通过赢棋频率来判断当时落子决策的优劣，正如下面这个GIF所示：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/mcts%20in%20go.gif">
<p>对，研究人员们通过这样的做法已经证明了部分棋类游戏是有必胜策略的，比如五子棋，只要先手就必胜。但是，不同棋类的搜索空间（即枚举所有的棋局状态）大小是不一样的，国际象棋的搜索空间是$35^{80}$种状态，这个看上去已经很大了是吧？围棋的搜索空间却达到了$250^{150}$种状态，这个数字已经比宇宙中所有粒子的总数目还要大得多。所以在Alpha Go出世之前，围棋被公认为是AI不可能挑战人类的项目。但是，之后就被打脸的。那么之前科学家是怎么做的五子棋和国际象棋等的AI的呢？正是蒙特卡洛搜索树，说白了，这也是一种树搜索，不过是高效剪枝后的树搜索算法，这对于棋类这种在线活动而言是很重要的，因为规则限定你必须在规定时间内做出决策。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG119.png">
<p>蒙特卡洛树的搜索步骤总共分为四步，大致如下。如果对其细节想有更多了解的同学请参考Reference中的<a href="http://ieeexplore.ieee.org/document/6145622/" target="_blank" rel="external">第五条</a>。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/mcts.jpg">
<p>上图中每个节点代表一个局面。而 A/B 代表这个节点被访问 B 次，黑棋胜利了 A 次。例如一开始的根节点是 12/21，代表总共模拟了 21 次，黑棋胜利了 12 次。</p>
<p>我们将不断重复一个过程（很多万次）：<br>1.这个过程的第一步叫选择（Selection）。从根节点往下走，每次都选一个“最值得看的子节点”，直到来到一个“存在未扩展的子节点”的节点，如图中的 3/3 节点。什么叫做“存在未扩展的子节点”，其实就是指这个局面存在未走过的后续着法。<br>2.第二步叫扩展（Expansion），我们给这个节点加上一个 0/0 子节点，对应之前所说的“未扩展的子节点”，就是还没有试过的一个着法。<br>3.第三步是模拟（Simluation）。从上面这个没有试过的着法开始，用快速走子策略（Rollout policy）走到底，得到一个胜负结果。按照普遍的观点，快速走子策略适合选择一个棋力很弱但走子很快的策略。因为如果这个策略走得慢（比如用 AlphaGo 的策略网络走棋），虽然棋力会更强，结果会更准确，但由于耗时多了，在单位时间内的模拟次数就少了，所以不一定会棋力更强，有可能会更弱。这也是为什么我们一般只模拟一次，因为如果模拟多次，虽然更准确，但更慢。<br>4.第四步是回溯（Backpropagation）。把模拟的结果加到它的所有父节点上。例如第三步模拟的结果是 0/1（代表黑棋失败），那么就把这个节点的所有父节点加上 0/1。</p>
<h2 id="卷积神经网络-Convolutional-Neural-Network"><a href="#卷积神经网络-Convolutional-Neural-Network" class="headerlink" title="卷积神经网络 Convolutional Neural Network"></a>卷积神经网络 Convolutional Neural Network</h2><p>卷积神经网络是目前深度学习中最炙手可热的大明星之一，其在图像分类、目标识别等多方面都有很好的应用。这里我们讲讲其在图像分类方面的应用，如下所示。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG120.png">
<p>该网络的任务是给它一张图，它能判断这张图是描述的什么东西。当然你先需要训练它，怎么训练呢？这个训练过程就很像小时候爸妈教我们看图识物一样。回想一下，那时候，父母是不是在我们面前摆一堆我们还不认识的东西的图片，然后反复告诉我们这个张图描述的是什么，那张图又描述的是什么。只不过现在这一教授过程的对象变成了计算机，既然要教计算机，那当然要采用计算机的语言和思维。</p>
<p>现在，假设我们要教计算机认识狗，猫，船以及鸟这四个对象。那么首先，我们要准备这四个对象的大量图片，然后告诉计算机这些图片分别属于哪一类。这两个步骤采用更加正式的描述如下：<br>1.首先你要准备好某个图像的像素矩阵，记为X，比如这张图片是船的。<br>2.生成一个对应的one-hot vector，长得像这样$(0,0,1,0)$，其中只有一个1，其余全为零。这个one-hot vector表示的意思是(狗，猫，船，鸟)=(0,0,1,0)，即告诉计算机这张图属于船的。将这样的one-hot vector记为Y。这个向量就是用来指导计算机认识图片的。<br>3.将上述的准备好的一系列X,Y“喂”给卷积神经网络，通过随机梯度下降等学习方法，该网络最终能学会不同对象的特征，从而在限定的物品类别中作出精确的分类。具体来说，就是经过学习后的网络，你随意丢一张图片给它，它能立马输出这张图属于(狗，猫，船，鸟)的相应概率。因为经过了学习，其中属于船的概率值是最高的，属于其他类别的概率接近于零。</p>
<p>卷积神经网络已经在很多数据集上被验证比普通的神经网络有更强大的特征抽取能力。所以目前只要涉及到图像的分类或者识别的任务，一般都想到用卷积神经网络来做。那么，下围棋这里怎么用到卷积神经网络呢？首先，我们要认识到下棋其实也是一个分类问题，就是当前给我一个棋局局面$\vec{s}$时，我如何在众多落子位置中选择一个最终要下的落子决策呢？我只需要选择我认为赢棋概率最高的位置下下去就行。这么看来下棋也就是一个多分类问题。既然卷积神经网络能模拟人类识别图像的能力，那么它是不是能用来学习人类棋手下棋的风格呢？对，早就有人这么干过了，Aja Huang在其<a href="https://arxiv.org/abs/1412.6564" target="_blank" rel="external">论文</a>中就实现过了这一过程，他从KGS围棋对战平台中获得了大量的对弈棋谱$\vec{s}$和在该状态$\vec{s}$ 人类棋手所做的落子决策$\vec{a}$，将这些$\vec{s}$和$\vec{a}$扔给一个卷积神经网络去学习。经过学习后，该网络就能模拟人类的风格进行下棋。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/alphagozero/WechatIMG121.png">
<p>那么很容易想到就是该神经网络的棋力应当是与它模仿的人类选手的棋力相当的。如果它模仿的人是一个臭棋手，那么它的下棋水平也会很臭，如果模仿的是高手，其水平也会相应提高。在Aja Huang这篇论文中，他们训练的卷积神经网络的棋力大概是业余六段。</p>
<p>从函数的角度解释卷积神经网络。不论是人还是机器，我们由某个状态$\vec{s}$想到对应的决策$\vec{a}$，都可以看成是一个函数映射$f$，即$f:\vec{s} \mapsto \vec{a}$。这个映射完全是由函数的参数$\Theta$决定，其实不管是人类还是机器，学习的过程就是在学这个参数$\Theta$。人类的认知经验其实就是抽象的$\Theta$，被存储在我们的大脑中。而神经网络通过模仿学习人类的经验参数$\Theta$，但这个学习过程存在误差（想想上课时老师教授你的东西，你也不可能全部听进去）。因此神经网络学到的参数只是趋近于$\Theta$的，记为$\theta$。然后$\theta$就被保存在非易失性存储器里，供下一次神经网络被调用时使用。</p>
<p>注意到，这样一个学习人类风格下棋的神经网络被称为策略网络$p$(Policy Network），在下文将会被反复提及到。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本篇比较详细地介绍了Alpha Go中的两个主要组件：卷积神经网络和蒙特卡洛树搜索。正是这二者的有效结合构造出了有史以来最强的围棋AI。下篇将开始进入正题，详细解剖Alpha Go和AlphaGo Zero的架构和原理。</p>
<hr>
<p>Reference<br><a href="https://storage.googleapis.com/deepmind-media/alphago/AlphaGoNaturePaper.pdf" target="_blank" rel="external">https://storage.googleapis.com/deepmind-media/alphago/AlphaGoNaturePaper.pdf</a><br><a href="http://www.nature.com/nature/journal/v550/n7676/full/nature24270.html" target="_blank" rel="external">http://www.nature.com/nature/journal/v550/n7676/full/nature24270.html</a><br><a href="https://charlesliuyx.github.io/2017/10/18/深入浅出看懂AlphaGo元/" target="_blank" rel="external">https://charlesliuyx.github.io/2017/10/18/深入浅出看懂AlphaGo元/</a><br><a href="https://www.zhihu.com/question/39916945/answer/184152952" target="_blank" rel="external">https://www.zhihu.com/question/39916945/answer/184152952</a><br><a href="http://ieeexplore.ieee.org/document/6145622/" target="_blank" rel="external">http://ieeexplore.ieee.org/document/6145622/</a><br><a href="https://zhuanlan.zhihu.com/p/25345778" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/25345778</a><br><a href="https://arxiv.org/abs/1412.6564" target="_blank" rel="external">https://arxiv.org/abs/1412.6564</a><br><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/1-1-A-RL/" target="_blank" rel="external">https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/1-1-A-RL/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;就在上个月的19号，AlphaGo Zero横空出世，号称是没有利用人类棋谱作为指导的AI打败了之前完虐李世石的AlphaGo Lee。这一消息着实轰动，19号这一天朋友圈被刷屏（但大部分还是非业内从业者在转发）。上个礼拜又在做调研，被老板抓去讲AlphaGo Zero。组会后，还是被老板认为讲解地不够直白，不能向更大的老板作报告（更大的老板可是没有AI的背景知识的）。我也慢慢意识到一个好的researcher不仅需要很强的理解能力，更需要极强的表达能力。为了锻炼自己的表达能力，这次博文就从非AI从业者的角度讲解这只有史以来最强的狗，希望同学们读完后也能跟别人吹吹Alpha Go了。&lt;/p&gt;
&lt;p&gt;由于内容较多，该水文将分为上下两篇。上篇主要介绍Alpha Go的主要组件。如果你对卷积神经网络和蒙特卡洛树搜索很了解的话，可以跳过上篇。下篇进入正题，将详细介绍Alpha Go和Alpha Go Zero的原理。当然了，所有的讲解都是以非AI从业者的角度出发，不会有晦涩复杂的数学推导。&lt;/p&gt;
&lt;p&gt;（主要的材料还是基于组会上的slides，仍旧是以图片的形式，十分抱歉&lt;/p&gt;
    
    </summary>
    
    
      <category term="CNN" scheme="https://xijunlee.github.io/tags/CNN/"/>
    
      <category term="Reinforcement Learning" scheme="https://xijunlee.github.io/tags/Reinforcement-Learning/"/>
    
      <category term="MCTS" scheme="https://xijunlee.github.io/tags/MCTS/"/>
    
  </entry>
  
  <entry>
    <title>从单纯型法到列生成算法</title>
    <link href="https://xijunlee.github.io/2017/10/12/%E4%BB%8E%E5%8D%95%E7%BA%AF%E5%9E%8B%E6%B3%95%E5%88%B0%E5%88%97%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/"/>
    <id>https://xijunlee.github.io/2017/10/12/从单纯型法到列生成算法/</id>
    <published>2017-10-12T06:49:05.000Z</published>
    <updated>2017-11-06T13:04:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在做混合整数规划相关的调研，主要是关于列生成算法 (Column Generation Algorithm)，搜了一圈，发现网路上并有很多相关的中文资料，难道这个算法太难了？还是普及度不够高？后来找到了一份相关的不错的英文讲义，从头看下来，也就知道了列生成算法大概是在干什么，但是其中原因还是不得要领。</p>
<p>之后，我又认真复习了单纯形法，才明白了列生成算法的初衷和要领，希望本文能把它讲明白。</p>
<p>（最近一直用图片的形式记录，是因为这些总结都是组会上的slides😅</p>
<a id="more"></a>
<h2 id="单纯型法-Simplex-Method"><a href="#单纯型法-Simplex-Method" class="headerlink" title="单纯型法 Simplex Method"></a>单纯型法 Simplex Method</h2><p>单纯形法是求解线性规划代表性的算法。其基于这么样的一个事实：线性规划是在凸集上的凸优化问题，因此其局部最优解也是全局最优解。而这些局部最优解是会出现在该凸集的顶点上，所以单纯形法的思路就是在这些顶点上移动，一直移动到局部最优的顶点。这些顶点也叫做基本可行解，那么这些移动也就是从一个基本可行解通过基变换(即从众多非基变量中选择一个进基，再从基变量中选择一个使其出基)变成另一个基本可行解，直到不能再使得优化目标更优为止（这里，我们采用线性规划的标准形式，即最小化目标函数）。这个基变换的操作涉及到进基和出基，那么如何选择哪个非基变量进基呢？这里就会涉及到reduced cost rate，即下图中的$c^r_j$。用单纯型法的语言来说就是，通过数次基变换，使得再也找不到一个非基变量使得reduced cost rate小于零，即再也找不到一个非基变量进基使得目标函数减小，这样我们就找到目标函数在其polyhedron上的最优值。单纯形法简单过程如下面这张图所示，但完整的推导请参考<a href="http://personal.vu.nl/l.stougie/Courses/ALP/BTonlyCh12345.pdf" target="_blank" rel="external">Introduction to Linear Optimization</a>的第二、三章相关内容。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/pic10.png">
<h2 id="列生成算法-Column-Generation-Algorithm"><a href="#列生成算法-Column-Generation-Algorithm" class="headerlink" title="列生成算法 Column Generation Algorithm"></a>列生成算法 Column Generation Algorithm</h2><p>单纯型法虽然能保证在数次迭代后找到最优解，但是其面对变量很多的线性规划问题就显得很弱了。因为它需要去在众多变量里进行基变换，这种枚举的工作量是可怕的。因此，有人基于单纯型法提出了列生成算法，其思路大概就是先把原问题(master problem)restrict到一个规模更小（即变量数比原问题少的）的restricted master problem，在restricted master problem上用单纯型法求最优解，但是此时求得的最优解只是restricted master problem上的，并不是master problem的最优解。此时，就需要通过一个subproblem去check在那些未被考虑的变量中是否有使得reduced cost rate小于零的呢（其具体的做法就是通过求解一个线性最大化问题，即求未被考虑的变量中的reduced cost rate的最大值）？如果有，那么我就把这个变量的相关系数列加入到restricted master problem的系数矩阵中。经过这样反复的迭代，直到subproblem中的reduced cost rate大于等于零，那么master problem就求到了最优解。更详细的过程参看以下两张图：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/pic11.png">
<p>注意到，这里为什么要把restricted master problem转化到其对偶问题呢？我的理解是，虽然通过单纯型法直接求解restricted master problem能得到subproblem中所需的变量$u=c_BA_B^{-1}$，但是restricted master problem也可能是一个变量很多的线性规划。前面也说过了，单纯型法对变量很多的问题是无能为力的。因此通过单纯型法求restricted master problemde的对偶问题（将restricted master problem对偶一下，就能使得变量数大幅减小，因为这些变量转换成了对偶问题中的限制条件了），能更快地得到子问题想要的$u=c_BA_B^{-1}$。</p>
<p>再次注意到，子问题是一个背包问题，通过求解该问题，我们既可以得到未被restricted master problem考虑到的变量中最大的reduced cost rate，又能得到相应的系数列。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/pic12.png">
<h2 id="列生成算法经典例子-Cutting-Stock-Problem"><a href="#列生成算法经典例子-Cutting-Stock-Problem" class="headerlink" title="列生成算法经典例子 Cutting Stock Problem"></a>列生成算法经典例子 Cutting Stock Problem</h2><p>下面给出一个列生成法的经典例子，Cutting Stock Problem。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/%E5%9B%BE%E7%89%872.png">
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/%E5%9B%BE%E7%89%873.png">
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/%E5%9B%BE%E7%89%874.png">
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/%E5%9B%BE%E7%89%875.png">
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/%E5%9B%BE%E7%89%876.png">
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/%E5%9B%BE%E7%89%877.png">
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/%E5%9B%BE%E7%89%878.png">
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/column%20generation/%E5%9B%BE%E7%89%879.png">
<hr>
<p>Reference<br><a href="http://www.or.rwth-aachen.de/research/publications/primer.pdf" target="_blank" rel="external">http://www.or.rwth-aachen.de/research/publications/primer.pdf</a><br><a href="https://optimization.mccormick.northwestern.edu/index.php/Column_generation_algorithms" target="_blank" rel="external">https://optimization.mccormick.northwestern.edu/index.php/Column_generation_algorithms</a><br><a href="http://ocw.nctu.edu.tw/upload/classbfs121109080773803.pdf" target="_blank" rel="external">http://ocw.nctu.edu.tw/upload/classbfs121109080773803.pdf</a><br><a href="http://personal.vu.nl/l.stougie/Courses/ALP/BTonlyCh12345.pdf" target="_blank" rel="external">http://personal.vu.nl/l.stougie/Courses/ALP/BTonlyCh12345.pdf</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近在做混合整数规划相关的调研，主要是关于列生成算法 (Column Generation Algorithm)，搜了一圈，发现网路上并有很多相关的中文资料，难道这个算法太难了？还是普及度不够高？后来找到了一份相关的不错的英文讲义，从头看下来，也就知道了列生成算法大概是在干什么，但是其中原因还是不得要领。&lt;/p&gt;
&lt;p&gt;之后，我又认真复习了单纯形法，才明白了列生成算法的初衷和要领，希望本文能把它讲明白。&lt;/p&gt;
&lt;p&gt;（最近一直用图片的形式记录，是因为这些总结都是组会上的slides😅&lt;/p&gt;
    
    </summary>
    
    
      <category term="Column Generation Algorithm" scheme="https://xijunlee.github.io/tags/Column-Generation-Algorithm/"/>
    
      <category term="Operation Research" scheme="https://xijunlee.github.io/tags/Operation-Research/"/>
    
      <category term="Simplex Method" scheme="https://xijunlee.github.io/tags/Simplex-Method/"/>
    
  </entry>
  
  <entry>
    <title>极简总结两个矩阵分解</title>
    <link href="https://xijunlee.github.io/2017/10/01/%E6%9E%81%E7%AE%80%E6%80%BB%E7%BB%93%E4%B8%A4%E4%B8%AA%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3/"/>
    <id>https://xijunlee.github.io/2017/10/01/极简总结两个矩阵分解/</id>
    <published>2017-10-01T11:23:10.000Z</published>
    <updated>2017-10-01T11:26:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>矩阵分解在ml用的非常多，尤其是特征分解和奇异值分解。特征分解只能用于实对称矩阵，而奇异值分解适用于任何形式的矩阵。二者之间有紧密的联系，遂用以下三张图总结。</p>
<a id="more"></a>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/MatrixFactorization/WechatIMG61.png">
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/MatrixFactorization/WechatIMG62.png">
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/MatrixFactorization/WechatIMG60.png">
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;矩阵分解在ml用的非常多，尤其是特征分解和奇异值分解。特征分解只能用于实对称矩阵，而奇异值分解适用于任何形式的矩阵。二者之间有紧密的联系，遂用以下三张图总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Matrix Factorization" scheme="https://xijunlee.github.io/tags/Matrix-Factorization/"/>
    
  </entry>
  
  <entry>
    <title>通俗理解Dirichlet分布及其实践</title>
    <link href="https://xijunlee.github.io/2017/09/09/Dirichlet%E5%88%86%E5%B8%83%E4%B8%8EBeta%E5%88%86%E5%B8%83/"/>
    <id>https://xijunlee.github.io/2017/09/09/Dirichlet分布与Beta分布/</id>
    <published>2017-09-09T13:17:26.000Z</published>
    <updated>2017-11-04T04:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近项目中有一部分用到了Dirichlet分布及其采样，这个分布应该是本科阶段的概率论没有教过的吧（也可能是我上课走神😓）。于是，从头学习，整理如下。</p>
<h2 id="Beta分布"><a href="#Beta分布" class="headerlink" title="Beta分布"></a>Beta分布</h2><p>要说Dirichlet分布之前，先了解下其特殊情况Beta分布。一言以蔽之，Beta分布是二项分布的分布。二项分布中的参数theta在Beta分布中，也被认为是一个随机变量，因此Beta分布是用来描述这个随机变量theta的。下面用知乎上一个通俗的例子来说明（我觉得这个例子讲得相当好）。更严谨的叙述参看<a href="https://mqshen.gitbooks.io/prml/Chapter2/binary/beta_distribute.html" target="_blank" rel="external">PRML中相关章节</a>。</p>
<a id="more"></a>
<p>用一句话来说，beta分布可以看作一个概率的概率分布，当你不知道一个东西的具体概率是多少时，它可以给出了所有概率出现的可能性大小。</p>
<p>举一个简单的例子，熟悉棒球运动的都知道有一个指标就是棒球击球率(batting average)，就是用一个运动员击中的球数除以击球的总数，我们一般认为0.266是正常水平的击球率，而如果击球率高达0.3就被认为是非常优秀的。现在有一个棒球运动员，我们希望能够预测他在这一赛季中的棒球击球率是多少。你可能就会直接计算棒球击球率，用击中的数除以击球数，但是如果这个棒球运动员只打了一次，而且还命中了，那么他就击球率就是100%了，这显然是不合理的，因为根据棒球的历史信息，我们知道这个击球率应该是0.215到0.36之间才对啊。对于这个问题，我们可以用一个二项分布表示（一系列成功或失败），一个最好的方法来表示这些经验（在统计中称为先验信息）就是用beta分布，这表示在我们没有看到这个运动员打球之前，我们就有了一个大概的范围。beta分布的定义域是(0,1)这就跟概率的范围是一样的。接下来我们将这些先验信息转换为beta分布的参数，我们知道一个击球率应该是平均0.27左右，而他的范围是0.21到0.35，那么根据这个信息，我们可以取α=81,β=219。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/dirichlet/1.png">
<p>这是因为：</p>
<ol>
<li>beta分布的均值是$$\frac{\alpha}{\alpha+\beta}=\frac{81}{81+219}=0.27$$</li>
<li>从上图中，我们可以看到该分布主要落在(0.2,0.35)间，这就是从先验中得到的知识。</li>
</ol>
<p>在这个例子里，我们的x轴就表示各个击球率的取值，x对应的y值就是这个击球率所对应的概率。也就是说beta分布可以看作一个<strong>概率的概率分布</strong>。那么有了先验信息后，现在我们考虑一个运动员只打一次球，那么他现在的数据就是”1中;1击”。这时候我们就可以<strong>更新我们的分布</strong>了，让这个曲线<strong>做一些移动去适应我们的新信息</strong>。beta分布在数学上就给我们提供了这一性质，他与二项分布是<strong>共轭先验</strong>的（Conjugate_prior）。所谓共轭先验就是先验分布是beta分布，而后验分布同样是beta分布。结果很简单：</p>
<p>$$ \mbox{Beta}(\alpha_0+\mbox{hits}, \beta_0+\mbox{misses})$$<br>其中α0和β0是一开始的参数，在这里是81和219。所以在这一例子里，α增加了1(击中了一次)。β没有增加(没有漏球)。这就是我们的新的beta分布Beta(81+1,219)，我们跟原来的比较一下：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/dirichlet/2.png">
<p>可以看到这个分布其实没多大变化，这是因为只打了1次球并不能说明什么问题。但是如果我们得到了更多的数据，假设一共打了300次，其中击中了100次，200次没击中，那么这一新分布就是：</p>
<p>$$\mbox{Beta}(81+100, 219+200)$$</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/dirichlet/3.png">
<p>注意到这个曲线变得更加尖，并且平移到了一个右边的位置，表示比平均水平要高。</p>
<p>一个有趣的事情是，根据这个新的beta分布，我们可以得出他的数学期望为：</p>
<p>$$\frac{\alpha}{\alpha+\beta}=\frac{81+100}{81+100+219+200}=.303$$</p>
<p>这一结果要比直接的估计要小：</p>
<p>$$\frac{100}{100+200}=.333$$</p>
<p>你可能已经意识到，我们事实上就是在这个运动员在击球之前可以理解为他已经成功了81次，失败了219次这样一个<strong>先验信息</strong>。</p>
<p>因此，对于一个我们不知道概率theta是什么的二项分布，而又有一些合理的猜测时，beta分布能很好的作为描述该概率theta的概率分布。</p>
<p><strong>结论1</strong>：二项分布与Beta分布是<strong>共轭先验</strong>的。即Beta分布乘上一个二项分布的似然函数后，得到的后验分布仍然是一个Beta分布。</p>
<p>关于其的证明，可以参考reference中的<a href="https://www.zhihu.com/question/30269898" target="_blank" rel="external">链接</a>。</p>
<h2 id="Dirichlet分布"><a href="#Dirichlet分布" class="headerlink" title="Dirichlet分布"></a>Dirichlet分布</h2><p>先给出一个结论:</p>
<p><strong>结论2</strong>：Dirichlet分布就是由2种结果bernoulli trial导出的Beta分布外推到k种的一般情形。</p>
<p>详细一点地说，二项分布的分布是Beta分布，而二项分布的推广形式多项分布的分布就是Dirichlet分布。</p>
<p><strong>结论3</strong>：Dirichlet分布与多项分布是共轭先验的。即Dirichlet分布乘上一个多项分布的似然函数后，得到的后验分布仍然是一个Dirichlet分布。</p>
<p>严谨的叙述参考<a href="https://mqshen.gitbooks.io/prml/Chapter2/multinomial/dirichlet_distribute.html" target="_blank" rel="external">PRML相关章节</a>。</p>
<h2 id="实践：Dirichlet分布的估计"><a href="#实践：Dirichlet分布的估计" class="headerlink" title="实践：Dirichlet分布的估计"></a>实践：Dirichlet分布的估计</h2><p>即在给定多项分布中概率向量p的一些样本后，如何估计Dirichlet分布中的参数alpha。关于这个问题，Microsoft Research的<a href="https://tminka.github.io" target="_blank" rel="external">Tom Minka</a>给出了两种解决办法。无外乎都是极大似然法，两种方法的差异在于第一种方法是采用拟牛顿法来迭代求最大似然估计，而第二种方法则是稍微曲线救国了一下，先定义两个与alpha相关的值，通过先求这两个值从而求得alpha的最大似然估计，其中采用了EM的思想。具体细节可以参考其<a href="https://tminka.github.io/papers/dirichlet/minka-dirichlet.pdf" target="_blank" rel="external">论文</a>。</p>
<p>Minka大神同时也实现了其提出的两种方法的<a href="https://github.com/tminka/fastfit" target="_blank" rel="external">Matlab源码</a>，而<a href="http://www.ericsuh.com" target="_blank" rel="external">Eric J. Suh</a>将这些算法又用Python实现了一遍，做成了一个独立的<a href="https://github.com/ericsuh/dirichlet" target="_blank" rel="external">Python Package</a>。我项目中就是直接用的这个，跪谢两位大神Orz!</p>
<hr>
<p>Reference<br><a href="https://github.com/tminka/fastfit" target="_blank" rel="external">https://github.com/tminka/fastfit</a><br><a href="https://tminka.github.io/papers/dirichlet/minka-dirichlet.pdf" target="_blank" rel="external">https://tminka.github.io/papers/dirichlet/minka-dirichlet.pdf</a><br><a href="https://www.zhihu.com/question/30269898" target="_blank" rel="external">https://www.zhihu.com/question/30269898</a><br><a href="https://mqshen.gitbooks.io/prml/Chapter2/multinomial/dirichlet_distribute.html" target="_blank" rel="external">https://mqshen.gitbooks.io/prml/Chapter2/multinomial/dirichlet_distribute.html</a><br><a href="https://mqshen.gitbooks.io/prml/Chapter2/binary/beta_distribute.html" target="_blank" rel="external">https://mqshen.gitbooks.io/prml/Chapter2/binary/beta_distribute.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近项目中有一部分用到了Dirichlet分布及其采样，这个分布应该是本科阶段的概率论没有教过的吧（也可能是我上课走神😓）。于是，从头学习，整理如下。&lt;/p&gt;
&lt;h2 id=&quot;Beta分布&quot;&gt;&lt;a href=&quot;#Beta分布&quot; class=&quot;headerlink&quot; title=&quot;Beta分布&quot;&gt;&lt;/a&gt;Beta分布&lt;/h2&gt;&lt;p&gt;要说Dirichlet分布之前，先了解下其特殊情况Beta分布。一言以蔽之，Beta分布是二项分布的分布。二项分布中的参数theta在Beta分布中，也被认为是一个随机变量，因此Beta分布是用来描述这个随机变量theta的。下面用知乎上一个通俗的例子来说明（我觉得这个例子讲得相当好）。更严谨的叙述参看&lt;a href=&quot;https://mqshen.gitbooks.io/prml/Chapter2/binary/beta_distribute.html&quot;&gt;PRML中相关章节&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Probability Theory" scheme="https://xijunlee.github.io/tags/Probability-Theory/"/>
    
  </entry>
  
  <entry>
    <title>多目标优化方法之MOEA-D</title>
    <link href="https://xijunlee.github.io/2017/08/29/%E5%A4%9A%E7%9B%AE%E6%A0%87%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E4%B9%8BMOEA-D/"/>
    <id>https://xijunlee.github.io/2017/08/29/多目标优化方法之MOEA-D/</id>
    <published>2017-08-29T14:57:35.000Z</published>
    <updated>2017-08-30T13:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近项目有一部分是在做多目标优化，调研了一些论文，总结一下其中目前state-of-the-art的solution —— <a href="http://ieeexplore.ieee.org/document/4358754/" target="_blank" rel="external">MOEA/D: A Multiobjective Evolutionary Algorithm Based on Decomposition</a>，这篇paper出自两位华人之手Qingfu Zhang和Hui Li。</p>
<hr>
<p>下面用我组会slides上的两张图简单介绍问题和这篇paper提出的解决思路。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/MOEAD/MOEAD%20summary.png">
<a id="more"></a>
<p>对于多目标优化问题F，MOEA/D的解决思路非常之简单，就是通过权重向量lamda将多个单优化目标组合到一起，将该问题转为单目标优化问题。乍一看，非常简单呢。但是其通过权重向量lambda为遗传算法中的候选解定义了邻居的概念，通过与邻居共同进化的思想，寻找pareto最优。但我觉得其缺点还是需要人为地去设置权重向量们，权重向量设置的好坏将决定最后解的质量。以下是具体算法的一个简单流程图：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/MOEAD/MOEAD%20flow%20chart.png">
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近项目有一部分是在做多目标优化，调研了一些论文，总结一下其中目前state-of-the-art的solution —— &lt;a href=&quot;http://ieeexplore.ieee.org/document/4358754/&quot;&gt;MOEA/D: A Multiobjective Evolutionary Algorithm Based on Decomposition&lt;/a&gt;，这篇paper出自两位华人之手Qingfu Zhang和Hui Li。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面用我组会slides上的两张图简单介绍问题和这篇paper提出的解决思路。&lt;/p&gt;
&lt;img src=&quot;http://xijun-album.oss-cn-hangzhou.aliyuncs.com/MOEAD/MOEAD%20summary.png&quot;&gt;
    
    </summary>
    
    
      <category term="Multiobjective Optimization" scheme="https://xijunlee.github.io/tags/Multiobjective-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>机器学习中常见激活函数总结</title>
    <link href="https://xijunlee.github.io/2017/06/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <id>https://xijunlee.github.io/2017/06/25/机器学习中常见激活函数总结/</id>
    <published>2017-06-25T13:58:32.000Z</published>
    <updated>2017-11-06T13:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>机器学习中很多场合都用到了激活函数 (Activation Function)，但激活函数主要是在神经网络中提出来的，很多场合下其实就是函数。这篇总结一下常见的激活函数以及它们的优缺点。</p>
<h2 id="激活函数起源与性质"><a href="#激活函数起源与性质" class="headerlink" title="激活函数起源与性质"></a>激活函数起源与性质</h2><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/ActivationFunction/pic0.png">
<a id="more"></a>
<p>一个人工神经元就是对生物神经元的数学建模。人工神经元就是用一个数学模型简单模拟神经细胞。神经细胞有多个树突和一个伸长的轴突。一个神经元的轴突连接到其他神经元的树突，并向其传导神经脉冲。神经元会根据来自它的若干树突的信号决定是否从其轴突向其他神经元发出神经脉冲。而激活函数就是这个神经元的数学模型，它决定是否将经过变换后的上一层输入信号传递给下一层神经元。激活函数的性质有：</p>
<ol>
<li>非线性： 当激活函数是线性的时候，一个两层的神经网络就可以逼近基本上所有的函数了。但是，如果激活函数是恒等激活函数的时候（即f(x)=x），就不满足这个性质了，而且如果MLP使用的是恒等激活函数，那么其实整个网络跟单层神经网络是等价的。</li>
<li>可微性： 当优化方法是基于梯度的时候，这个性质是必须的。</li>
<li>单调性： 当激活函数是单调的时候，单层网络能够保证是凸函数。f(x)≈x： 当激活函数满足这个性质的时候，如果参数的初始化是random的很小的值，那么神经网络的训练将会很高效；如果不满足这个性质，那么就需要很用心的去设置初始值。</li>
<li>输出值的范围： 当激活函数输出值是 有限 的时候，基于梯度的优化方法会更加稳定，因为特征的表示受有限权值的影响更显著；当激活函数的输出是 无限的时候，模型的训练会更加高效，不过在这种情况小，一般需要更小的learning rate.</li>
</ol>
<p>常见的激活函数总结如下图：<br><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/ActivationFunction/pic1.png"></p>
<h2 id="Sigmoid系激活函数"><a href="#Sigmoid系激活函数" class="headerlink" title="Sigmoid系激活函数"></a>Sigmoid系激活函数</h2><p>Sigmoid系激活函数是一大类函数，其函数形状是S型的，因此而得名。代表有Sigmoid函数和tanh函数。</p>
<p>$$sigmoid: f(x)=\frac{1}{1+e^{-x}}$$<br>$$tanh: f(x)=\frac{2}{1+e^{-2x}}-1=2Sigmoid(2x)-1$$</p>
<p>Sigmoid系是之前使用的最多的激活函数，它在物理意义上最为接近生物神经元，能够把输入的连续实值“压缩”到[0,1]或者[-1,1]。此外，[0,1]的输出还可以被表示作概率，或用于输入的归一化，代表性的如Sigmoid交叉熵损失函数。此外，Sigmoid函数还被用在逻辑斯蒂回归中，在那里，它被叫做逻辑斯蒂函数 (Logistic Function)。所以我怎么老是看到这个函数的身影，原来它在不同场景中穿的马甲不同。既然提到了回归，那么就再提一下逻辑斯蒂回归的一般形式Softmax回归中的Softmax函数。逻辑斯蒂回归是种类数k=2时的Softmax回归,有关二者更多详情请戳<a href="http://www.cnblogs.com/maybe2030/p/5678387.html" target="_blank" rel="external">这里</a>和<a href="http://ufldl.stanford.edu/wiki/index.php/Softmax回归" target="_blank" rel="external">这里</a>。</p>
<p>回到Sigmoid系函数。近年来，用它的人越来越少了。主要是因为它的一些缺点：<br>1.饱和性：从sigmoid函数图像中可以看到，其两侧增长十分缓慢，即越靠近两侧导数趋近于0。那么这在神经网络中训练的会带来梯度弥散 (Gradient Disperse) 的问题，使得训练一个神经网络十分缓慢，或者根本无法收敛。具体来说，在训练神经网络的反向传播算法中，需要计算梯度$\nabla=\sigma’\delta x$。其中$\sigma’$是sigmoid函数的导数。每经过一个sigmoid神经元，梯度就要乘上一个$\sigma’$。从下图可以看到，sigmoid函数导数的最大值是0.25。那么连续的乘以sigmoid的导数，会导致梯度越来越小。一般来说， sigmoid 网络在5层之内就会产生梯度消失现象这就是梯度弥散问题。这对于深层网络的训练是很大的问题，因此在如今大火的DNN中，sigmoid遭到抛弃。<br>2.sigmoid函数的输出均大于0：这使得输出不是0均值，这称为偏移现象，这会导致后一层的神经元将得到上一层输出的非0均值的信号作为输入。（关于这一点，我不是很理解）</p>
<p>tanh也是一种非常常见的激活函数。与sigmoid相比，它的输出均值是0，使得其收敛速度要比sigmoid快，减少迭代次数。然而，从途中可以看出，tanh一样具有软饱和性，从而造成梯度弥散。</p>
<h2 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h2><p>最近几年卷积神经网络中，激活函数往往不选择sigmoid或tanh函数，而是选择relu函数。Relu函数的定义是：</p>
<p>$$ReLU: f(x)=\max(0,x)$$</p>
<p>Relu函数作为激活函数，有下面几大优势：</p>
<p>1.速度快：和sigmoid函数需要计算指数和倒数相比，relu函数其实就是一个max(0,x)，计算代价小很多。<br>2.减轻梯度消失问题：relu函数在大于零的一侧其导数大于零，不会导致梯度变小。当然，激活函数仅仅是导致梯度减小的一个因素，但无论如何在这方面relu的表现强于sigmoid。使用relu激活函数可以让你训练更深的网络。</p>
<p>然而，随着训练的推进，部分输入会落入x&lt;0的区域，其梯度等于0，导致对应权重无法更新。这种现象被称为“神经元死亡”。与sigmoid类似，ReLU的输出均值也大于0，偏移现象和 神经元死亡会共同影响网络的收敛性。对此，相应的改进有Leaky-ReLU，ELU，见<a href="http://blog.csdn.net/u014595019/article/details/52562159" target="_blank" rel="external">参考链接</a>。</p>
<h2 id="Maxout"><a href="#Maxout" class="headerlink" title="Maxout"></a>Maxout</h2><p>$$Maxout: f(x)=\max(w^T_1x+b_1,w^T_2x+b_2,⋯,w^T_2x+b_2)$$</p>
<p>Maxout出现在ICML2013上，作者Goodfellow将maxout和dropout结合后，号称在MNIST, CIFAR-10, CIFAR-100, SVHN这4个数据上都取得了start-of-art的识别率。可以注意到，ReLU 和 Leaky ReLU 都是它的一个变形。这个激活函数有点大一统的感觉，因为maxout网络能够近似任意连续函数，且当w2,b2,…,wn,bn为0时，退化为ReLU。Maxout能够缓解梯度弥散，同时又规避了ReLU神经元死亡的缺点，但增加了参数和计算量。</p>
<hr>
<p>Reference<br><a href="http://blog.csdn.net/cyh_24/article/details/50593400" target="_blank" rel="external">http://blog.csdn.net/cyh_24/article/details/50593400</a><br><a href="http://blog.csdn.net/u014595019/article/details/52562159" target="_blank" rel="external">http://blog.csdn.net/u014595019/article/details/52562159</a><br><a href="https://www.zybuluo.com/hanbingtao/note/485480" target="_blank" rel="external">https://www.zybuluo.com/hanbingtao/note/485480</a><br><a href="http://ufldl.stanford.edu/wiki/index.php/Softmax回归" target="_blank" rel="external">http://ufldl.stanford.edu/wiki/index.php/Softmax回归</a><br><a href="http://www.cnblogs.com/maybe2030/p/5678387.html" target="_blank" rel="external">http://www.cnblogs.com/maybe2030/p/5678387.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;机器学习中很多场合都用到了激活函数 (Activation Function)，但激活函数主要是在神经网络中提出来的，很多场合下其实就是函数。这篇总结一下常见的激活函数以及它们的优缺点。&lt;/p&gt;
&lt;h2 id=&quot;激活函数起源与性质&quot;&gt;&lt;a href=&quot;#激活函数起源与性质&quot; class=&quot;headerlink&quot; title=&quot;激活函数起源与性质&quot;&gt;&lt;/a&gt;激活函数起源与性质&lt;/h2&gt;&lt;img src=&quot;http://xijun-album.oss-cn-hangzhou.aliyuncs.com/ActivationFunction/pic0.png&quot;&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://xijunlee.github.io/tags/Machine-Learning/"/>
    
      <category term="Activation Function" scheme="https://xijunlee.github.io/tags/Activation-Function/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络实践之MNIST手写数字体识别</title>
    <link href="https://xijunlee.github.io/2017/06/23/CNN%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E4%BD%93%E8%AF%86%E5%88%AB/"/>
    <id>https://xijunlee.github.io/2017/06/23/CNN实践之手写数字体识别/</id>
    <published>2017-06-23T07:46:26.000Z</published>
    <updated>2017-11-06T13:08:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之前一直都是只看理论，没有动手，现在终于把理论付诸实践了。话不多说，这篇博文记录一下我在kaggle上实践过程。</p>
<h2 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h2><p>MNIST (“Modified National Institute of Standards and Technology”) is the de facto “hello world” dataset of computer vision. Since its release in 1999, this classic dataset of handwritten images has served as the basis for benchmarking classification algorithms. As new machine learning techniques emerge, MNIST remains a reliable resource for researchers and learners alike.</p>
<a id="more"></a>
<p>In this competition, your goal is to correctly identify digits from a dataset of tens of thousands of handwritten images. We’ve curated a set of tutorial-style kernels which cover everything from regression to neural networks. We encourage you to experiment with different algorithms to learn first-hand what works well and how techniques compare.</p>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>其实这就是个多分类问题，所以常见的分类器都能解决上述问题。kaggle上的大神们也给出了卷积神经网络以外的思路：比如PCA+SVM。类似的还有很多，比如可以PCA+RandomForest, PCA+Xgboost, PCA+blahblahblah … </p>
<p>但最牛逼的解决方案还是CNN，我自己写了一个PCA+SVM的kernel，得分比CNN低很多。当然，如果做好feature engeering和好好调参的话，应该还是能取得不错的效果。但是肯定不如CNN厉害，不然现在CNN为什么会在图像识别领域大火呢？</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>要我手写一个CNN是不可能的，既太花时间，我也暂时没那个本事。所以，我就用了Keras+ TensorFlow来实现一个卷积神经网络。</p>
<p>官网介绍：<a href="https://keras.io" target="_blank" rel="external">Keras</a> is a high-level neural networks API, written in Python and capable of running on top of either TensorFlow, CNTK or Theano. It was developed with a focus on enabling fast experimentation. Being able to go from idea to result with the least possible delay is key to doing good research.</p>
<p>官网介绍：<a href="https://www.tensorflow.org" target="_blank" rel="external">TensorFlow</a> is an open source software library for numerical computation using data flow graphs. Nodes in the graph represent mathematical operations, while the graph edges represent the multidimensional data arrays (tensors) that flow between them. This flexible architecture lets you deploy computation to one or more CPUs or GPUs in a desktop, server, or mobile device without rewriting code. TensorFlow also includes TensorBoard, a data visualization toolkit.</p>
<p>Keras是一个高层次抽象的卷积神经网络python库，但它本身是不会做矩阵计算等任务的，需要以TensorFlow作为后端来进行复杂的底层计算。在TensorFlow的基础上，Keras能非常方便地调用各种api来完成卷积神经网络的搭建。下面，简单地记录一下安装Kera+TensorFlow的过程。</p>
<h3 id="TensorFlow安装-on-Ubuntu-without-GPU-support"><a href="#TensorFlow安装-on-Ubuntu-without-GPU-support" class="headerlink" title="TensorFlow安装 (on Ubuntu without GPU support)"></a>TensorFlow安装 (on Ubuntu without GPU support)</h3><p>这里，我用的系统是Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64), python是3.4.3，GCC是4.8.4，所以下面的安装就是基于以上环境。建议采用pip的方式安装TensorFlow，下面keras也一样，简直是太方便了。因为实验室服务器没有GPU，所以我就只能安装CPU版本的TensorFlow了。</p>
<p>1.创建虚拟环境</p>
<p>为不同的项目创建独立的python虚拟环境是一个良好的习惯。利用不同的python虚拟环境来做不同的事，以免不同项目的环境相互影响了。以下两行代码分别是安装python 2.7和python 3.4+虚拟环境的命令，任君选择。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install python-pip python-dev python-virtualenv    <span class="comment"># python 2.7</span></div><div class="line">$ sudo apt-get install python3-pip python3-dev python3-virtualenv <span class="comment"># python 3.4+</span></div></pre></td></tr></table></figure></p>
<p>2.启动虚拟环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ virtualenv --system-site-packages ~/tensorflow</div><div class="line">$ <span class="built_in">source</span> ~/tensorflow/bin/activate</div></pre></td></tr></table></figure></p>
<p>3.安装TensorFlow<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python 2</span></div><div class="line">$ sudo pip install --upgrade tensorflow</div><div class="line"> </div><div class="line"><span class="comment"># Python 3</span></div><div class="line">$ sudo pip3 install --upgrade tensorflow</div></pre></td></tr></table></figure></p>
<h3 id="Keras安装"><a href="#Keras安装" class="headerlink" title="Keras安装"></a>Keras安装</h3><p>1.安装所需要的包和keras</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pip install numpy scipy</div><div class="line">$ pip install scikit-learn</div><div class="line">$ pip install pillow</div><div class="line">$ pip install h5py</div><div class="line">$ pip install keras</div></pre></td></tr></table></figure>
<p>2.编辑配置文件keras.json，将keras的计算后端设置为TensorFlow：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.keras/keras.json</div></pre></td></tr></table></figure></p>
<p>确保上述文件内容为:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"image_dim_ordering"</span>: <span class="string">"tf"</span>, </div><div class="line">    <span class="attr">"epsilon"</span>: <span class="number">1e-07</span>, </div><div class="line">    <span class="attr">"floatx"</span>: <span class="string">"float32"</span>, </div><div class="line">    <span class="attr">"backend"</span>: <span class="string">"tensorflow"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>image_dim_ordering：TensorFlow是使用NumPy数组 (height, width, depth)。如果你用Theano，数组表示方法(depth, height, width)。</p>
<p>打开python，输入以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Keras</div></pre></td></tr></table></figure></p>
<p>如果出现以下代码，表示基于TensorFlow的Keras安装成功！！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keras</div><div class="line">Using TensorFlow backend.</div></pre></td></tr></table></figure></p>
<h2 id="实现与结果"><a href="#实现与结果" class="headerlink" title="实现与结果"></a>实现与结果</h2><p>这里给出我利用keras实现的一个多层卷积神经网络，源码戳<a href="https://github.com/xijunlee/kaggle-solution/blob/master/DigitRecognizer/DigitRec_CNN.py" target="_blank" rel="external">这里</a>，该网络的结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">_________________________________________________________________</div><div class="line">Layer (type)                 Output Shape              Param #</div><div class="line">=================================================================</div><div class="line">conv2d_1 (Conv2D)            (None, 28, 28, 32)        320</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_2 (Conv2D)            (None, 28, 28, 32)        9248</div><div class="line">_________________________________________________________________</div><div class="line">max_pooling2d_1 (MaxPooling2 (None, 14, 14, 32)        0</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_3 (Conv2D)            (None, 14, 14, 64)        18496</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_4 (Conv2D)            (None, 14, 14, 64)        36928</div><div class="line">_________________________________________________________________</div><div class="line">max_pooling2d_2 (MaxPooling2 (None, 7, 7, 64)          0</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_5 (Conv2D)            (None, 7, 7, 128)         73856</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_6 (Conv2D)            (None, 7, 7, 128)         147584</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_7 (Conv2D)            (None, 7, 7, 128)         147584</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_8 (Conv2D)            (None, 7, 7, 128)         147584</div><div class="line">_________________________________________________________________</div><div class="line">max_pooling2d_3 (MaxPooling2 (None, 3, 3, 128)         0</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_9 (Conv2D)            (None, 3, 3, 256)         295168</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_10 (Conv2D)           (None, 3, 3, 256)         590080</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_11 (Conv2D)           (None, 3, 3, 256)         590080</div><div class="line">_________________________________________________________________</div><div class="line">conv2d_12 (Conv2D)           (None, 3, 3, 256)         590080</div><div class="line">_________________________________________________________________</div><div class="line">max_pooling2d_4 (MaxPooling2 (None, 1, 1, 256)         0</div><div class="line">_________________________________________________________________</div><div class="line">flatten_1 (Flatten)          (None, 256)               0</div><div class="line">_________________________________________________________________</div><div class="line">dropout_1 (Dropout)          (None, 256)               0</div><div class="line">_________________________________________________________________</div><div class="line">dense_1 (Dense)              (None, 128)               32896</div><div class="line">_________________________________________________________________</div><div class="line">dense_2 (Dense)              (None, 10)                1290</div><div class="line">=================================================================</div><div class="line">Total params: 2,681,194</div><div class="line">Trainable params: 2,681,194</div><div class="line">Non-trainable params: 0</div></pre></td></tr></table></figure></p>
<p>我是故意把这个搞的比较复杂，最后kaggle上LB得分为0.98971, rank 652/1924，很多人做到了score为1的地步……</p>
<p>我前两个卷积层为例说明一下卷积神经网络中参数个数的理解。</p>
<p>首先，我的输入是一个28x28的灰度图，那么输入层是一个28x28x1的结构，那个1是该层的深度。</p>
<p>conv2d_1：第一个卷积层，总共设置了32个filters(滤波器，也叫卷积核，这家伙也是有多个马甲的)。卷积核大小设置为3x3。那么经过32个filter的卷积后，输入层的图像变成了32个28x28的卷积层。（注意filter的数量等于该层的深度）。那么输入层到第一层卷积层的参数数量是怎么计算的呢？因为每个卷积核有3x3个参数，然后每个卷积核还要带一个bias参数，所以一个卷积核有3x3x1+1=10个参数。conv2d_1总共有32个卷积核，并且每个卷积核的深度是1，所以总共有(3x3x1+1)x32=320个参数。这个1看起来乘地没必要，但是它代表了每个卷积核的深度。卷积核的深度与上一层的输出的深度相等。</p>
<p>con2d_2：第二个卷积层，同样设置了32个filters，卷积核大小同样设置为3x3。conv2d_1的输出是28x28x32的结构，即深度为32的28x28的图像。自然，con2d_2的filter的深度也为32。经过con2d_2的32个filter后，卷积得到依旧是28x28x32的输出。参数的数量怎么计算呢？对于con2d_2的一个卷积核来说，其深度是32，每一层的大小是3x3，再外加一个bias参数，那么一个卷积核的参数数量便是3x3x32+1=289个。然后总共有32个卷积核，所以总共的参数数量是(3x3x32+1)x32=9248。</p>
<p>可能con2d_2的参数数量说明的让人头晕，更详细和生动的说明可以参见<a href="https://www.zybuluo.com/hanbingtao/note/485480" target="_blank" rel="external">博文</a>，里面有动图说明了对于深度大于1的卷积核的卷积操作。</p>
<h3 id="关于引入冲量"><a href="#关于引入冲量" class="headerlink" title="关于引入冲量"></a>关于引入冲量</h3><p>本小节内容转载自 @辛淼 CaffeCN社区（caffecn.cn）</p>
<p>随机梯度下降（SGD）是按batch来进行更新，通常来说下降速度比较快，但却容易造成另一个问题，就是更新过程不稳定，容易出现震荡。</p>
<p>引入momentum的idea是很直接的，就是在更新下降方向的时候不仅要考虑到当前的方向，也要考虑到上一次的更新方向，两者加权，某些情况下可以避免震荡。冲量，就是<strong>上一次更新方向所占的权值</strong>。</p>
<p>一个小的trick是，当刚开始训练的时候，把冲量设小，或者直接就置为0，然后慢慢增大冲量，有时候效果比较好。</p>
<h3 id="PCA-SVM的实现"><a href="#PCA-SVM的实现" class="headerlink" title="PCA+SVM的实现"></a>PCA+SVM的实现</h3><p>之后，我又尝试了PCA+SVM的模型，源码戳<a href="https://github.com/xijunlee/kaggle-solution/blob/master/DigitRecognizer/DigitRec_SVM.py" target="_blank" rel="external">这里</a>。因为没有专门去调参数，所以LB得分很低，才0.49743…… 不过，我想就算找到了最优参数，其效果也应该比不上卷积神经网络。</p>
<h2 id="DNN零基础入门教程推荐"><a href="#DNN零基础入门教程推荐" class="headerlink" title="DNN零基础入门教程推荐"></a>DNN零基础入门教程推荐</h2><p>最后，推荐一组深度学习的入门教程，我认为还不错。</p>
<p><a href="https://www.zybuluo.com/hanbingtao/note/433855" target="_blank" rel="external">零基础入门深度学习(1) - 感知器</a><br><a href="https://www.zybuluo.com/hanbingtao/note/448086" target="_blank" rel="external">零基础入门深度学习(2) - 线性单元和梯度下降</a><br><a href="https://www.zybuluo.com/hanbingtao/note/476663" target="_blank" rel="external">零基础入门深度学习(3) - 神经网络和反向传播算法</a><br><a href="https://www.zybuluo.com/hanbingtao/note/485480" target="_blank" rel="external">零基础入门深度学习(4) - 卷积神经网络</a><br><a href="https://zybuluo.com/hanbingtao/note/541458" target="_blank" rel="external">零基础入门深度学习(5) - 循环神经网络</a><br><a href="https://zybuluo.com/hanbingtao/note/581764" target="_blank" rel="external">零基础入门深度学习(6) - 长短时记忆网络(LSTM)</a><br><a href="https://zybuluo.com/hanbingtao/note/626300" target="_blank" rel="external">零基础入门深度学习(7) - 递归神经网络</a></p>
<hr>
<p>Reference<br><a href="https://www.kaggle.com/poonaml/deep-neural-network-keras-way" target="_blank" rel="external">https://www.kaggle.com/poonaml/deep-neural-network-keras-way</a><br><a href="http://blog.topspeedsnail.com/archives/10427" target="_blank" rel="external">http://blog.topspeedsnail.com/archives/10427</a><br><a href="https://keras.io" target="_blank" rel="external">https://keras.io</a><br><a href="https://www.kaggle.com/somshubramajumdar/deep-convolutional-network-using-keras" target="_blank" rel="external">https://www.kaggle.com/somshubramajumdar/deep-convolutional-network-using-keras</a><br><a href="https://www.zybuluo.com/hanbingtao/note/485480" target="_blank" rel="external">https://www.zybuluo.com/hanbingtao/note/485480</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;之前一直都是只看理论，没有动手，现在终于把理论付诸实践了。话不多说，这篇博文记录一下我在kaggle上实践过程。&lt;/p&gt;
&lt;h2 id=&quot;任务描述&quot;&gt;&lt;a href=&quot;#任务描述&quot; class=&quot;headerlink&quot; title=&quot;任务描述&quot;&gt;&lt;/a&gt;任务描述&lt;/h2&gt;&lt;p&gt;MNIST (“Modified National Institute of Standards and Technology”) is the de facto “hello world” dataset of computer vision. Since its release in 1999, this classic dataset of handwritten images has served as the basis for benchmarking classification algorithms. As new machine learning techniques emerge, MNIST remains a reliable resource for researchers and learners alike.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://xijunlee.github.io/tags/Machine-Learning/"/>
    
      <category term="CNN" scheme="https://xijunlee.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式总结</title>
    <link href="https://xijunlee.github.io/2017/06/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://xijunlee.github.io/2017/06/20/正则表达式总结/</id>
    <published>2017-06-20T13:47:48.000Z</published>
    <updated>2017-11-06T13:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>正则表达式笔记，特指python中的re模块。</p>
<h2 id="正则表达式相关注解"><a href="#正则表达式相关注解" class="headerlink" title="正则表达式相关注解"></a>正则表达式相关注解</h2><p>（1）数量词的贪婪模式与非贪婪模式</p>
<p>正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab<em>”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab</em>?”，将找到”a”。</p>
<p>注：我们一般使用非贪婪模式来提取。</p>
<a id="more"></a>
<p>（2）反斜杠问题</p>
<p>与大多数编程语言相同，正则表达式里使用”\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\”：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。</p>
<p>Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\”表示。同样，匹配一个数字的”\d”可以写成r”\d”。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/re_summary/pic1.png">
<h2 id="Python-Re模块"><a href="#Python-Re模块" class="headerlink" title="Python Re模块"></a>Python Re模块</h2><p>Python 自带了re模块，它提供了对正则表达式的支持。主要用到的方法列举如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#返回pattern对象</span></div><div class="line">re.compile(string[,flag])  </div><div class="line"><span class="comment">#以下为匹配所用函数</span></div><div class="line">re.match(pattern, string[, flags])</div><div class="line">re.search(pattern, string[, flags])</div><div class="line">re.split(pattern, string[, maxsplit])</div><div class="line">re.findall(pattern, string[, flags])</div><div class="line">re.finditer(pattern, string[, flags])</div><div class="line">re.sub(pattern, repl, string[, count])</div><div class="line">re.subn(pattern, repl, string[, count])</div></pre></td></tr></table></figure>
<p>在介绍这几个方法之前，我们先来介绍一下pattern的概念，pattern可以理解为一个匹配模式，那么我们怎么获得这个匹配模式呢？很简单，我们需要利用re.compile方法就可以。例如</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pattern = re.compile(<span class="string">r'hello'</span>)</div></pre></td></tr></table></figure>
<p>在参数中我们传入了原生字符串对象，通过compile方法编译生成一个pattern对象，然后我们利用这个对象来进行进一步的匹配。</p>
<p>另外大家可能注意到了另一个参数 flags，在这里解释一下这个参数的含义：</p>
<p>参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M。</p>
<p>可选值有：</p>
<p> • re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）<br> • re.M(全拼：MULTILINE): 多行模式，改变’^’和’$’的行为（参见上图）<br> • re.S(全拼：DOTALL): 点任意匹配模式，改变’.’的行为<br> • re.L(全拼：LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定<br> • re.U(全拼：UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性<br> • re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。<br>在刚才所说的另外几个方法例如 re.match 里我们就需要用到这个pattern了，下面我们一一介绍。</p>
<p>注：以下七个方法中的flags同样是代表匹配模式的意思，如果在pattern生成时已经指明了flags，那么在下面的方法中就不需要传入这个参数了。<br>（1）re.match(pattern, string[, flags])</p>
<p>这个方法将会从string（我们要匹配的字符串）的开头开始，尝试匹配pattern，一直向后匹配，如果遇到无法匹配的字符，立即返回None，如果匹配未结束已经到达string的末尾，也会返回None。两个结果均表示匹配失败，否则匹配pattern成功，同时匹配终止，不再对string向后匹配。下面我们通过一个例子理解一下</p>
<p>我们还看到最后打印出了result.group()，这个是什么意思呢？下面我们说一下关于match对象的的属性和方法<br>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p>
<p>属性：<br>1.string: 匹配时使用的文本。<br>2.re: 匹配时使用的Pattern对象。<br>3.pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。<br>4.endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。<br>5.lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。<br>6.lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。<br>方法：<br>1.group([group1, …]):<br>获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。<br>2.groups([default]):<br>以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。<br>3.groupdict([default]):<br>返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。<br>4.start([group]):<br>返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。<br>5.end([group]):<br>返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。<br>6.span([group]):<br>返回(start(group), end(group))。<br>7.expand(template):<br>将匹配到的分组代入template中然后返回。template中可以使用\id或\g、\g引用分组，但不能使用编号0。\id与\g是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g0。</p>
<p>（2）re.search(pattern, string[, flags])</p>
<p>search方法与match方法极其类似，区别在于match()函数只检测re是不是在string的开始位置匹配，search()会扫描整个string查找匹配，match（）只有在0位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，match()就返回None。同样，search方法的返回对象同样match()返回对象的方法和属性。</p>
<p>（3）re.split(pattern, string[, maxsplit])</p>
<p>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。</p>
<p>（4）re.findall(pattern, string[, flags])</p>
<p>搜索string，以列表形式返回全部能匹配的子串。<br>（5）re.finditer(pattern, string[, flags])</p>
<p>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。</p>
<p>（6）re.sub(pattern, repl, string[, count])</p>
<p>使用repl替换string中每一个匹配的子串后返回替换后的字符串。<br>当repl是一个字符串时，可以使用\id或\g、\g引用分组，但不能使用编号0。<br>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。<br>count用于指定最多替换次数，不指定时全部替换。</p>
<h2 id="Python-Re模块的另一种使用方式"><a href="#Python-Re模块的另一种使用方式" class="headerlink" title="Python Re模块的另一种使用方式"></a>Python Re模块的另一种使用方式</h2><p>在上面我们介绍了7个工具方法，例如match，search等等，不过调用方式都是 re.match，re.search的方式，其实还有另外一种调用方式，可以通过pattern.match，pattern.search调用，这样调用便不用将pattern作为第一个参数传入了，大家想怎样调用皆可。</p>
<p>函数API列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])</div><div class="line">search(string[, pos[, endpos]]) | re.search(pattern, string[, flags])</div><div class="line">split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])</div><div class="line">findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])</div><div class="line">finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])</div><div class="line">sub(repl, string[, count]) | re.sub(pattern, repl, string[, count])</div><div class="line">subn(repl, string[, count]) |re.sub(pattern, repl, string[, count])</div></pre></td></tr></table></figure></p>
<hr>
<p>Reference<br><a href="http://cuiqingcai.com/977.html" target="_blank" rel="external">http://cuiqingcai.com/977.html</a><br><a href="http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html" target="_blank" rel="external">http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;正则表达式笔记，特指python中的re模块。&lt;/p&gt;
&lt;h2 id=&quot;正则表达式相关注解&quot;&gt;&lt;a href=&quot;#正则表达式相关注解&quot; class=&quot;headerlink&quot; title=&quot;正则表达式相关注解&quot;&gt;&lt;/a&gt;正则表达式相关注解&lt;/h2&gt;&lt;p&gt;（1）数量词的贪婪模式与非贪婪模式&lt;/p&gt;
&lt;p&gt;正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab&lt;em&gt;”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab&lt;/em&gt;?”，将找到”a”。&lt;/p&gt;
&lt;p&gt;注：我们一般使用非贪婪模式来提取。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Regularization Expression" scheme="https://xijunlee.github.io/tags/Regularization-Expression/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理基础</title>
    <link href="https://xijunlee.github.io/2017/06/06/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    <id>https://xijunlee.github.io/2017/06/06/自然语言处理基础/</id>
    <published>2017-06-06T03:01:32.000Z</published>
    <updated>2017-11-06T13:05:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>自然语言处理中基本和经典模型的总结</p>
<h2 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h2><p>对于一篇文档，TF-IDF（词频-逆文档频率）能为其中的词赋予权重，它度量的是词语与文本的相关性，而非简单的词频。因此TF-IDF能用来<strong>判断文章主题</strong>。对于一个文本而言，想要知道其主题或是想知道这篇文档是关于哪个方面的，那么最容易想到的方法就是提取关键字了。TF-IDF可以认为是分为两步来做这个事情：</p>
<a id="more"></a>
<p>（1）最基本的思路是提取该文本中出现次数最多的词。结果你肯定猜到了，出现次数最多的词是–”的”、”是”、”在”–这一类最常用的词。它们叫做”停用词” (stop words) ，这些词出现的次数最多，但是并不能体现文本的主题，那么这些词就要去掉，而要去找那些“真正”的主题词。对于一个词语i，统计其在文档j中出现的次数，记为tf_(i,j)，这就是词频 (TF, Term Frequency) 的统计了。</p>
<p>（2）在统计了文档中各个词的词频后，我们需要调整那些“停用词”的频率，来挑选出“真正”的关键词。对于一个拥有N个文本的语料库，统计词语i在语料库中包含词语i的文本数，记为df_i，那么idf_i=log(N/df_i)，注意到对数中是文本总数除以包含词语i的文本数。如果一个词在很多文本中都有出现，即df趋近于N，那么其idf就趋近于0。如果一个词只在很少文档中出现，即其df趋近于0，那么其idf就趋于无穷大。</p>
<p>（3）将词频tf_(i,j)乘以idf_i记得到词语i与文本j的相关性,即</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/NLP_foundation/p1.png">
<p>TF-IDF算法的优点是简单快速，结果比较符合实际情况。缺点是，单纯以”词频”衡量一个词的重要性，不够全面，有时重要的词可能出现次数并不多。而且，这种算法无法体现词的位置信息，出现位置靠前的词与出现位置靠后的词，都被视为重要性相同，这是不正确的。（一种解决方法是，对全文的第一段和每一段的第一句话，给予较大的权重。</p>
<hr>
<p>下面再给出一个<a href="http://www.ruanyifeng.com/blog/2013/03/tf-idf.html" target="_blank" rel="external">阮一峰</a>博客中的例子。</p>
<p>让我们从一个实例开始讲起。假定现在有一篇长文《中国的蜜蜂养殖》，我们准备用计算机提取它的关键词。</p>
<p>一个容易想到的思路，就是找到出现次数最多的词。如果某个词很重要，它应该在这篇文章中多次出现。于是，我们进行”词频”（Term Frequency，缩写为TF）统计。<br>结果你肯定猜到了，出现次数最多的词是—-“的”、”是”、”在”—-这一类最常用的词。它们叫做”停用词”（stop words），表示对找到结果毫无帮助、必须过滤掉的词。</p>
<p>假设我们把它们都过滤掉了，只考虑剩下的有实际意义的词。这样又会遇到了另一个问题，我们可能发现”中国”、”蜜蜂”、”养殖”这三个词的出现次数一样多。这是不是意味着，作为关键词，它们的重要性是一样的？</p>
<p>显然不是这样。因为”中国”是很常见的词，相对而言，”蜜蜂”和”养殖”不那么常见。如果这三个词在一篇文章的出现次数一样多，有理由认为，”蜜蜂”和”养殖”的重要程度要大于”中国”，也就是说，在关键词排序上面，”蜜蜂”和”养殖”应该排在”中国”的前面。</p>
<p>所以，我们需要一个重要性调整系数，衡量一个词是不是常见词。如果某个词比较少见，但是它在这篇文章中多次出现，那么它很可能就反映了这篇文章的特性，正是我们所需要的关键词。</p>
<p>用统计学语言表达，就是在词频的基础上，要对每个词分配一个”重要性”权重。最常见的词（”的”、”是”、”在”）给予最小的权重，较常见的词（”中国”）给予较小的权重，较少见的词（”蜜蜂”、”养殖”）给予较大的权重。这个权重叫做”逆文档频率”（Inverse Document Frequency，缩写为IDF），它的大小与一个词的常见程度成反比。</p>
<p>知道了”词频”（TF）和”逆文档频率”（IDF）以后，将这两个值相乘，就得到了一个词的TF-IDF值。某个词对文章的重要性越高，它的TF-IDF值就越大。所以，排在最前面的几个词，就是这篇文章的关键词。</p>
<p>下面就是这个算法的细节。</p>
<p>第一步，计算词频。</p>
<p>考虑到文章有长短之分，为了便于不同文章的比较，进行”词频”标准化。</p>
<p>第二步，计算逆文档频率。<br>这时，需要一个语料库（corpus），用来模拟语言的使用环境。</p>
<p>如果一个词越常见，那么分母就越大，逆文档频率就越小越接近0。分母之所以要加1，是为了避免分母为0（即所有文档都不包含该词）。log表示对得到的值取对数。<br>第三步，计算TF-IDF。</p>
<p>可以看到，TF-IDF与一个词在文档中的出现次数成正比，与该词在整个语言中的出现次数成反比。所以，自动提取关键词的算法就很清楚了，就是计算出文档的每个词的TF-IDF值，然后按降序排列，取排在最前面的几个词。</p>
<p>还是以《中国的蜜蜂养殖》为例，假定该文长度为1000个词，”中国”、”蜜蜂”、”养殖”各出现20次，则这三个词的”词频”（TF）都为0.02。然后，搜索Google发现，包含”的”字的网页共有250亿张，假定这就是中文网页总数。包含”中国”的网页共有62.3亿张，包含”蜜蜂”的网页为0.484亿张，包含”养殖”的网页为0.973亿张。则它们的逆文档频率（IDF）和TF-IDF如下：</p>
<p>从上表可见，”蜜蜂”的TF-IDF值最高，”养殖”其次，”中国”最低。（如果还计算”的”字的TF-IDF，那将是一个极其接近0的值。）所以，如果只选择一个词，”蜜蜂”就是这篇文章的关键词。</p>
<p>除了自动提取关键词，TF-IDF算法还可以用于许多别的地方。比如，信息检索时，对于每个文档，都可以分别计算一组搜索词（”中国”、”蜜蜂”、”养殖”）的TF-IDF，将它们相加，就可以得到整个文档的TF-IDF。这个值最高的文档就是与搜索词最相关的文档。</p>
<p>下面，再再给出一个利用TFIDF度量两个文本相似度的<a href="http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html" target="_blank" rel="external">方法</a>：</p>
<p>（1）使用TF-IDF算法，找出两篇文章的关键词；<br>（2）每篇文章各取出若干个关键词（比如20个），合并成一个集合，计算每篇文章对于这个集合中的词的词频（为了避免文章长度的差异，可以使用相对词频）；<br>（3）生成两篇文章各自的词频向量；<br>（4）计算两个向量的余弦相似度，值越大就表示越相似。</p>
<h2 id="词袋模型-Bag-of-Words"><a href="#词袋模型-Bag-of-Words" class="headerlink" title="词袋模型 (Bag of Words)"></a>词袋模型 (Bag of Words)</h2><p>词袋 (Bag of Words，简称BoW) 是一种统计某个词在一份文档中出现次数的算法。统计所得的词频数据可以用于比较文档并测量其相似性，具体应用包括搜索、文档分类、主题建模等。词袋法是为深度学习网络准备文本输入的方法。</p>
<p>词袋法会列出每个词及其在每份文档中出现的次数。实质上已经向量化的词和文档被存储到表格中，表格的每一行对应一个词，每一列对应一份文档，而每个单元格则是一项词频数。语料库中的每份文档都以长度相等的列来表示。这也就是<strong>词频向量</strong>，一种脱离了上下文的输出。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/NLP_foundation/p2.png">
<p>通常在应用之前，每个词频向量都需要进行标准化，确保向量的所有元素之和为1。如此就相当于将每个词的频率转换为该词在文档中出现的概率。</p>
<h2 id="Word2vec"><a href="#Word2vec" class="headerlink" title="Word2vec"></a>Word2vec</h2><p>NLP（Natural Language Processing）问题要转化为机器学习的问题，首先就要把单词数学化表示,就是用n维实数向量来代表一个单词，常见的词向量有以下两种：</p>
<h3 id="One-hot-Representation"><a href="#One-hot-Representation" class="headerlink" title="One-hot Representation"></a>One-hot Representation</h3><p>例如： </p>
<p>“话筒”表示为 [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 …]</p>
<p>“麦克”表示为 [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 …]</p>
<p>One-hot表示使用了单词在词表中的编号信息，编码方式如下：向量长度为词表大小，单词在词表中的编号对应的那一个维度为1，其余为0。</p>
<p>One-hot表示存在两个问题：</p>
<p>（1）维度比较大,尤其在用于神经网络的一些算法时，出现“维数灾难”。</p>
<p>（2）词汇鸿沟：任意两个词之间都是孤立的，不能体现词和词之间的关系（因为编码过程仅仅使用了它们在词表中的编号信息）。</p>
<h3 id="Distributional-Representation"><a href="#Distributional-Representation" class="headerlink" title="Distributional Representation"></a>Distributional Representation</h3><p>例如： [0.792, −0.177, −0.107, 0.109, 0.542, …]，每个维度用一个实数值表示</p>
<p>克服了One-hot表示存在的两个问题：</p>
<p>（1）解决了维度大的问题：常见维度50或者100。</p>
<p>（2）解决了“词汇鸿沟”问题：可以通过计算向量之间的距离（欧式距离、余弦距离等）来体现词与词的相似性。</p>
<p>这样的词向量称为词嵌入（word-embedding），那么如何训练这样的词向量呢？我们可以通过训练语言模型的同时，得到词向量。</p>
<hr>
<p>Reference<br><a href="http://www.ruanyifeng.com/blog/2013/03/tf-idf.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2013/03/tf-idf.html</a><br><a href="http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html</a><br><a href="https://deeplearning4j.org/cn/bagofwords-tf-idf" target="_blank" rel="external">https://deeplearning4j.org/cn/bagofwords-tf-idf</a><br><a href="http://www.nustm.cn/blog/index.php/archives/842" target="_blank" rel="external">http://www.nustm.cn/blog/index.php/archives/842</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;自然语言处理中基本和经典模型的总结&lt;/p&gt;
&lt;h2 id=&quot;TF-IDF&quot;&gt;&lt;a href=&quot;#TF-IDF&quot; class=&quot;headerlink&quot; title=&quot;TF-IDF&quot;&gt;&lt;/a&gt;TF-IDF&lt;/h2&gt;&lt;p&gt;对于一篇文档，TF-IDF（词频-逆文档频率）能为其中的词赋予权重，它度量的是词语与文本的相关性，而非简单的词频。因此TF-IDF能用来&lt;strong&gt;判断文章主题&lt;/strong&gt;。对于一个文本而言，想要知道其主题或是想知道这篇文档是关于哪个方面的，那么最容易想到的方法就是提取关键字了。TF-IDF可以认为是分为两步来做这个事情：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Natural Language Process" scheme="https://xijunlee.github.io/tags/Natural-Language-Process/"/>
    
  </entry>
  
  <entry>
    <title>集成学习总结</title>
    <link href="https://xijunlee.github.io/2017/06/03/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://xijunlee.github.io/2017/06/03/集成学习总结/</id>
    <published>2017-06-03T08:18:51.000Z</published>
    <updated>2017-11-06T13:05:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>看了不少集成学习的资料，很多算法都有相似之处，看了之后没有进行比较和整理，太容易忘记了，所以这篇来做个笔记。</p>
<p>集成学习，（就我目前所学习到的）主要可以分为三大类，Boosting, Bagging, Stacking。Boosting的代表有AdaBoost, gbdt, xgboost。而Bagging的代表则是随机森林 (Random Forest)。Stacking 的话，好像还没有著名的代表，可以视其为一种集成的套路。</p>
<a id="more"></a>
<h2 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h2><p>首先，Boosting是一个迭代提升的过程，所以它肯定是串行的算法（尽管xgboost可以在节点分裂属性选择上做并行计算）。基于训练集，先训练弱学习器，然后根据前一个弱学习器分错的样本，改变样本的概率分布构成新的训练集，从而可以训练出一个更强的学习器。这样反复迭代提升，就能得到一系列分类器。最后，将这些分类器组合起来，就能构成一个很强的学习器。</p>
<h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h3><p>给定一个二分类的训练数据集</p>
<p>T={(x1,y1),…,(xN,yN)}</p>
<p>其中,x_i 是n维的, 类标y_i={-1,+1}</p>
<p>AdaBoost算法的步骤：<br>(1) 初始化训练数据的权值分布：D1=(w11,…,wi1,…,w1N),w1i=1/N,i=1,2,…,N(即初始时，每个样本视为一样的)<br>(2) 对m=1,2,…,M<br>(2a) 对具有权值分布Dm的训练数据集学习，得到一个基本分类器Gm(x)<br>(2b) 计算Gm(x)在训练数据集上的分类错误率:em=P(Gm(xi)!=yi)<br>(2c) 根据分类错误率计算Gm(x)的加权系数：am<br>(2d) 根据加权系数更新训练数据集的权值分布Dm+1<br>(3)以上学到了M个“弱”学习器，将这M个弱学习器加权求和：f(x)=sum(am*Gm(x)),最终的分类器为G(x)=sign(f(x))</p>
<p>总之，AdaBoost的主要思想就是在不改变训练数据的情况下，通过在迭代训练弱学习器中，不断提升被错分类样本的权重（也就是使被错分的样本在下一轮训练时得到更多的重视），不断减少正确分类样本的权重。最后通过加权线性组合M个弱分类器得到最终的分类器，正确率越高的弱分类器的投票权数越高，正确率低的弱分类器自然投票权数就低。</p>
<h3 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h3><p>GBDT的基本原理是boosting里面的 boosting tree（提升树），并使用gradient boost。GBDT中的树都是<strong>回归树</strong>，不是<strong>分类树</strong> ，因为<strong>gradient boost</strong> 需要按照<strong>损失函数</strong>的梯度近似的拟合残差，这样拟合的是连续数值，因此只有回归树。Gradient Boosting是一种Boosting的方法，其与传统的Boosting的区别是，每一次的计算是为了减少上一次的残差(residual)，而为了消除残差，可以在残差减少的梯度(Gradient)方向上建立一个新的模型。所以说，在Gradient Boosting中，每个新的模型的建立是为了使得之前模型的残差往梯度方向减少，与传统Boosting对正确、错误样本进行加权有着很大的区别。这个梯度代表上一轮学习器损失函数对预测值求导。与Boosting Tree的区别：Boosting Tree的适合于损失函数为<strong>平方损失</strong>或者<strong>指数损失</strong>。而Gradient Boosting适合<strong>各类损失函数</strong>（损失函数为：平方损失则相当于Boosting Tree拟合残差、损失函数为：使用指数损失则可以近似于Adaboost，但树是回归树）</p>
<p>下面是完整的GBDT介绍。</p>
<p>GBDT(Gradient Boosting Decision Tree) 又叫 MART（Multiple Additive Regression Tree)，是一种迭代的决策树算法，该算法由多棵决策树组成，所有树的结论累加起来做最终答案。它在被提出之初就和SVM一起被认为是泛化能力较强的算法。GBDT中的树是回归树（不是分类树），GBDT用来做回归预测，调整后也可以用于分类。GBDT的思想使其具有天然优势可以发现多种有区分性的特征以及特征组合。</p>
<h4 id="Regression-Decision-Tree：回归树"><a href="#Regression-Decision-Tree：回归树" class="headerlink" title="Regression Decision Tree：回归树"></a>Regression Decision Tree：回归树</h4><p>  回归树总体流程类似于分类树，区别在于，回归树的每一个节点都会得一个预测值，以年龄为例，该预测值等于属于这个节点的所有人年龄的平均值。分枝时穷举每一个feature的每个阈值找最好的分割点，但衡量最好的标准不再是最大熵，而是最小化平方误差。也就是被预测出错的人数越多，错的越离谱，平方误差就越大，通过最小化平方误差能够找到最可靠的分枝依据。分枝直到每个叶子节点上人的年龄都唯一或者达到预设的终止条件(如叶子个数上限)，若最终叶子节点上人的年龄不唯一，则以该节点上所有人的平均年龄做为该叶子节点的预测年龄。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p1.png">
<p>回归树算法如下图（截图来自《统计学习方法》5.5.1 CART生成）：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p2.png">
<p>请注意上图中的下标和上标,$x_i$表示第i个样本，$x^{(j)}$表示该样本的第j个feature。所以上图中的遍历划分变量j的意思是遍历feature和相应的s，找出使平方误差和最小的(j,s)。</p>
<h4 id="Boosting-Decision-Tree：提升树算法"><a href="#Boosting-Decision-Tree：提升树算法" class="headerlink" title="Boosting Decision Tree：提升树算法"></a>Boosting Decision Tree：提升树算法</h4><p>  提升树是迭代多棵回归树来共同决策。当采用平方误差损失函数时，每一棵回归树学习的是之前所有树的结论和残差，拟合得到一个当前的残差回归树，残差的意义如公式：残差 = 真实值 - 预测值 。提升树即是整个迭代过程生成的回归树的累加。<br>  举个例子，参考自一篇博客（参考文献 4），该博客举出的例子较直观地展现出多棵决策树线性求和过程以及残差的意义。<br>  训练一个提升树模型来预测年龄：<br>  训练集是4个人，A，B，C，D年龄分别是14，16，24，26。样本中有购物金额、上网时长、经常到百度知道提问等特征。提升树的过程如下：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p3.jpg">
<p>该例子很直观的能看到，预测值等于所有树值得累加，如A的预测值 = 树1左节点 值 15 + 树2左节点 -1 = 14。<br>  因此，给定当前模型 fm-1(x)，只需要简单的拟合当前模型的残差。现将回归问题的提升树算法叙述如下：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p4.png">
<h4 id="Gradient-Boosting-Decision-Tree：梯度提升决策树"><a href="#Gradient-Boosting-Decision-Tree：梯度提升决策树" class="headerlink" title="Gradient Boosting Decision Tree：梯度提升决策树"></a>Gradient Boosting Decision Tree：梯度提升决策树</h4><p>  提升树利用加法模型和前向分步算法实现学习的优化过程。当损失函数是平方损失和指数损失函数时，每一步的优化很简单，如平方损失函数学习残差回归树。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p5.png">
<p>但对于一般的损失函数，往往每一步优化没那么容易，如上图中的绝对值损失函数和Huber损失函数。针对这一问题，Freidman提出了梯度提升算法：利用最速下降的近似方法，即利用损失函数的负梯度在当前模型的值，作为回归问题中提升树算法的残差的近似值，拟合一个回归树。（注：鄙人私以为，与其说负梯度作为残差的近似值，不如说残差是负梯度的一种特例）算法如下（截图来自《The Elements of Statistical Learning》）：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p6.png">
<h2 id="xgboost"><a href="#xgboost" class="headerlink" title="xgboost"></a>xgboost</h2><p>xgboost类似于gbdt，但是很多地方经过了Tianqi Chen大牛的优化，因此不论是精度还是效率上都有了提升。与gbdt相比，具体的优点有：</p>
<p>1.损失函数是用泰勒展式二项逼近，而不是像gbdt里就是一阶导数<br>2.对树的结构进行了正则化约束，防止模型过度复杂，降低了过拟合的可能性<br>3.节点分裂的方式不同，gbdt是用的gini系数，xgboost是经过优化推导后的</p>
<p>xgboost是GB算法的高效实现，xgboost中的基学习器除了可以是CART（gbtree）也可以是线性分类器（gblinear）。下面所有的内容来自原始paper，包括公式。</p>
<p>(1) xgboost在目标函数中显示的加上了正则化项，基学习器为CART时，正则化项与树的叶子节点的数量T和叶子节点的值有关。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p7.png">
<p>(2) GB中使用Loss Function对f(x)的一阶导数计算出伪残差用于学习生成fm(x)，xgboost不仅使用到了一阶导数，还使用二阶导数。第t次的loss：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p8.png">
<p>对上式做二阶泰勒展开：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p9.png">
<p>(3) 上面提到CART回归树中寻找最佳分割点的衡量标准是<strong>最小化均方差</strong>，xgboost寻找分割点的标准是最大化Lsplit</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p10.png">
<p>xgboost算法的步骤和GB基本相同，都是首先初始化为一个常数，gb是根据一阶导数ri，xgboost是根据一阶导数gi和二阶导数hi，迭代生成基学习器，相加更新学习器。</p>
<p>xgboost与gdbt除了上述三点的不同，xgboost在实现时还做了许多优化：</p>
<ol>
<li>在寻找最佳分割点时，考虑传统的<strong>枚举每个特征的所有可能分割点的贪心法效率太低</strong>，xgboost实现了一种近似的算法。大致的思想是根据<strong>百分位</strong>法列举几个可能成为分割点的候选者，然后从候选者中根据上面求分割点的公式计算找出最佳的分割点。</li>
<li>xgboost考虑了训练数据为稀疏值的情况，可以为缺失值或者指定的值指定分支的默认方向，这能大大提升算法的效率，paper提到50倍。</li>
<li>xgboost借鉴了随机森林中的列（特征）采样技术，即在某个节点分裂时，不是在当前节点中所有属性中选取最佳分裂属性，而是在当前属性集合中的某些属性中来选择最优分裂属性。这种方法降低了过拟合的可能性。</li>
<li><p>特征列排序后以块的形式存储在内存中，在迭代中可以<strong>重复使用</strong>；虽然boosting算法迭代<strong>必须串行</strong>，但是在<strong>处理每个特征列</strong>时可以做到并行。</p>
</li>
<li><p>按照特征列方式存储能优化寻找最佳的分割点，但是当以行计算梯度数据时会导致内存的不连续访问，严重时会导致cache miss，降低算法效率。paper中提到，可先将数据收集到线程内部的buffer，然后再计算，提高算法的效率。</p>
</li>
<li>xgboost还考虑了当数据量比较大，内存不够时怎么有效的使用磁盘，主要是结合多线程、数据压缩、分片的方法，尽可能的提高算法的效率。</li>
</ol>
<h3 id="知乎上关于xgboost-gbdt讨论的经典问答"><a href="#知乎上关于xgboost-gbdt讨论的经典问答" class="headerlink" title="知乎上关于xgboost/gbdt讨论的经典问答"></a>知乎上关于xgboost/gbdt讨论的经典问答</h3><p>【问】xgboost/gbdt在调参时为什么树的深度很少就能达到很高的精度？<br>  用xgboost/gbdt在在调参的时候把树的最大深度调成6就有很高的精度了。但是用DecisionTree/RandomForest的时候需要把树的深度调到15或更高。用RandomForest所需要的树的深度和DecisionTree一样我能理解，因为它是用bagging的方法把DecisionTree组合在一起，相当于做了多次DecisionTree一样。但是xgboost/gbdt仅仅用梯度上升法就能用6个节点的深度达到很高的预测精度，使我惊讶到怀疑它是黑科技了。请问下xgboost/gbdt是怎么做到的？它的节点和一般的DecisionTree不同吗？<br>【答】<br>  这是一个非常好的问题，题主对各算法的学习非常细致透彻，问的问题也关系到这两个算法的本质。这个问题其实并不是一个很简单的问题，我尝试用我浅薄的机器学习知识对这个问题进行回答。<br>  一句话的解释，来自周志华老师的机器学习教科书（ 机器学习-周志华）：Boosting主要关注降低偏差，因此Boosting能基于泛化性能相当弱的学习器构建出很强的集成；Bagging主要关注降低方差，因此它在不剪枝的决策树、神经网络等学习器上效用更为明显。<br>  随机森林(random forest)和GBDT都是属于集成学习（ensemble learning)的范畴。集成学习下有两个重要的策略Bagging和Boosting。<br>  Bagging算法是这样做的：每个分类器都随机从原样本中做有放回的采样，然后分别在这些采样后的样本上训练分类器，然后再把这些分类器组合起来。简单的多数投票一般就可以。其代表算法是随机森林。Boosting的意思是这样，他通过迭代地训练一系列的分类器，每个分类器采用的样本分布都和上一轮的学习结果有关。其代表算法是AdaBoost, GBDT。<br>  其实就机器学习算法来说，其泛化误差可以分解为两部分，偏差（bias)和方差(variance)。这个可由下图的式子导出（这里用到了概率论公式D(X)=E(X^2)-[E(X)]^2）。偏差指的是算法的期望预测与真实预测之间的偏差程度，反应了模型本身的拟合能力；方差度量了同等大小的训练集的变动导致学习性能的变化，刻画了数据扰动所导致的影响。这个有点儿绕，不过你一定知道过拟合。<br>  如下图所示，当模型越复杂时，拟合的程度就越高，模型的训练偏差就越小。但此时如果换一组数据可能模型的变化就会很大，即模型的方差很大。所以模型过于复杂的时候会导致过拟合。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/Ensembling/p11.png">
<p>  当模型越简单时，即使我们再换一组数据，最后得出的学习器和之前的学习器的差别就不那么大，模型的方差很小。还是因为模型简单，所以偏差会很大。</p>
<p>  也就是说，当我们训练一个模型时，偏差和方差都得照顾到，漏掉一个都不行。<br>  对于Bagging算法来说，由于我们会并行地训练很多不同的分类器的目的就是降低这个方差(variance) ,因为采用了相互独立的基分类器多了以后，h的值自然就会靠近.所以对于每个基分类器来说，目标就是如何降低这个偏差（bias),所以我们会采用深度很深甚至不剪枝的决策树。<br>  对于Boosting来说，每一步我们都会在上一轮的基础上更加拟合原数据，所以可以保证偏差（bias）,所以对于每个基分类器来说，问题就在于如何选择variance更小的分类器，即更简单的分类器，所以我们选择了深度很浅的决策树。</p>
<p>【问】机器学习算法中GBDT和XGBOOST的区别有哪些？<br>【答】<br>传统GBDT以CART作为基分类器，xgboost还支持线性分类器，这个时候xgboost相当于带L1和L2正则化项的逻辑斯蒂回归（分类问题）或者线性回归（回归问题）。</p>
<p>传统GBDT在优化时只用到一阶导数信息，xgboost则对代价函数进行了二阶泰勒展开，同时用到了一阶和二阶导数。顺便提一下，xgboost工具支持自定义代价函数，只要函数可一阶和二阶求导。</p>
<p>xgboost在代价函数里加入了正则项，用于控制模型的复杂度。正则项里包含了树的叶子节点个数、每个叶子节点上输出的score的L2模的平方和。从Bias-variance tradeoff角度来讲，正则项降低了模型的variance，使学习出来的模型更加简单，防止过拟合，这也是xgboost优于传统GBDT的一个特性。</p>
<p>Shrinkage（缩减），相当于学习速率（xgboost中的eta）。xgboost在进行完一次迭代后，会将叶子节点的权重乘上该系数，主要是为了削弱每棵树的影响，让后面有更大的学习空间。实际应用中，一般把eta设置得小一点，然后迭代次数设置得大一点。（补充：传统GBDT的实现也有学习速率）</p>
<p>列抽样（column subsampling）即特征抽样。xgboost借鉴了随机森林的做法，支持列抽样，不仅能降低过拟合，还能减少计算，这也是xgboost异于传统gbdt的一个特性。</p>
<p>对缺失值的处理。对于特征的值有缺失的样本，xgboost可以自动学习出它的分裂方向。</p>
<p>xgboost工具支持并行。boosting不是一种串行的结构吗?怎么并行的？注意xgboost的并行不是tree粒度的并行，xgboost也是一次迭代完才能进行下一次迭代的（第t次迭代的代价函数里包含了前面t-1次迭代的预测值）。xgboost的并行是在特征粒度上的。我们知道，决策树的学习最耗时的一个步骤就是对特征的值进行排序（因为要确定最佳分割点），xgboost在训练之前，预先对数据进行了排序，然后保存为block结构，后面的迭代中重复地使用这个结构，大大减小计算量。这个block结构也使得并行成为了可能，在进行节点的分裂时，需要计算每个特征的增益，最终选增益最大的那个特征去做分裂，那么各个特征的增益计算就可以开多线程进行。<br>可并行的近似直方图算法。树节点在进行分裂时，我们需要计算每个特征的每个分割点对应的增益，即用贪心法枚举所有可能的分割点。当数据无法一次载入内存或者在分布式情况下，贪心算法效率就会变得很低，所以xgboost还提出了一种可并行的近似直方图算法，用于高效地生成候选的分割点。</p>
<p>多种语言封装支持。</p>
<p>【问】为什么基于 tree-ensemble 的机器学习方法，在实际的 kaggle 比赛中效果非常好？<br>【答】<br>作者：马超<br>链接：<a href="https://www.zhihu.com/question/51818176/answer/127637712" target="_blank" rel="external">https://www.zhihu.com/question/51818176/answer/127637712</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>通常，解释一个机器学习模型的表现是一件很复杂事情，而这篇文章尽可能用最直观的方式来解释这一问题。我主要从三个方面来回答楼主这个问题。</p>
<ol>
<li>理论模型 （站在 vc-dimension 的角度）</li>
<li>实际数据</li>
<li>系统的实现 （主要基于 xgboost）<br>通常决定一个机器学习模型能不能取得好的效果，以上三个方面的因素缺一不可。</li>
</ol>
<p>（1）站在理论模型的角度统计机器学习里经典的 vc-dimension 理论告诉我们：一个机器学习模型想要取得好的效果，这个模型需要满足以下两个条件：</p>
<ol>
<li>模型在我们的训练数据上的表现要不错，也就是 trainning error 要足够小。</li>
<li>模型的 vc-dimension 要低。换句话说，就是模型的自由度不能太大，以防overfit.当然，这是我用大白话描述出来的，真正的 vc-dimension 理论需要经过复杂的数学推导，推出 vc-bound. vc-dimension 理论其实是从另一个角度刻画了一个我们所熟知的概念，那就是 bias variance trade-off.</li>
</ol>
<p>好，现在开始让我们想象一个机器学习任务。对于这个任务，一定会有一个 “上帝函数” 可以完美的拟合所有数据（包括训练数据，以及未知的测试数据）。很可惜，这个函数我们肯定是不知道的 （不然就不需要机器学习了）。我们只可能选择一个 “假想函数” 来 逼近 这个 “上帝函数”，我们通常把这个 “假想函数” 叫做 hypothesis.</p>
<p>在这些 hypothesis 里，我们可以选择 svm, 也可以选择 logistic regression. 可以选择单棵决策树，也可以选择 tree-ensemble (gbdt, random forest).  现在的问题就是，为什么 tree-ensemble 在实际中的效果很好呢？</p>
<p>区别就在于 “模型的可控性”。</p>
<p>先说结论，tree-ensemble 这样的模型的可控性是好的，而像 LR  这样的模型的可控性是不够好的（或者说，可控性是没有 tree-ensemble 好的）。为什么会这样？别急，听我慢慢道来。</p>
<p>我们之前说，当我们选择一个 hypothsis 后，就需要在训练数据上进行训练，从而逼近我们的 “上帝函数”。我们都知道，对于 LR 这样的模型。如果 underfit，我们可以通过加 feature，或者通过高次的特征转换来使得我们的模型在训练数据上取得足够高的正确率。而对于 tree-enseble 来说，我们解决这一问题的方法是通过训练更多的 “弱弱” 的 tree.  所以，这两类模型都可以把 training error 做的足够低，也就是说模型的表达能力都是足够的。但是这样就完事了吗？没有，我们还需要让我们的模型的 vc-dimension 低一些。而这里，重点来了。在 tree-ensemble 模型中，通过加 tree 的方式，对于模型的 vc-dimension 的改变是比较小的。而在 LR 中，初始的维数设定，或者说特征的高次转换对于 vc-dimension 的影响都是更大的。换句话说，tree-ensemble 总是用一些 “弱弱” 的树联合起来去逼近 “上帝函数”，一次一小步，总能拟合的比较好。而对于 LR 这样的模型，我们很难去猜到这个“上帝函数”到底长什么样子（到底是2次函数还是3次函数？上帝函数如果是介于2次和3次之间怎么办呢？）。所以，一不小心我们设定的多项式维数高了，模型就 “刹不住车了”。俗话说的好，步子大了，总会扯着蛋。这也就是我们之前说的，tree-ensemble 模型的可控性更好，也即更不容易 overfit.</p>
<p>（2）站在数据的角度</p>
<p>除了理论模型之外, 实际的数据也对我们的算法最终能取得好的效果息息相关。kaggle 比赛选择的都是真实世界中的问题。所以数据多多少少都是有噪音的。而基于树的算法通常抗噪能力更强。比如在树模型中，我们很容易对缺失值进行处理。除此之外，基于树的模型对于 categorical feature 也更加友好。</p>
<p>除了数据噪音之外，feature 的多样性也是 tree-ensemble 模型能够取得更好效果的原因之一。通常在一个kaggle任务中，我们可能有年龄特征，收入特征，性别特征等等从不同 channel 获得的特征。而特征的多样性也正是为什么工业界很少去使用 svm 的一个重要原因之一，因为 svm 本质上是属于一个几何模型，这个模型需要去定义 instance 之间的 kernel 或者 similarity （对于linear svm 来说，这个similarity 就是内积）。这其实和我们在之前说过的问题是相似的，我们无法预先设定一个很好的similarity。这样的数学模型使得 svm 更适合去处理 “同性质”的特征，例如图像特征提取中的 lbp 。而从不同 channel 中来的 feature 则更适合 tree-based model, 这些模型对数据的 distributation 通常并不敏感。</p>
<p>（3）站在系统实现的角度</p>
<p>除了有合适的模型和数据，一个良好的机器学习系统实现往往也是算法最终能否取得好的效果的关键。一个好的机器学习系统实现应该具备以下特征：</p>
<ol>
<li>正确高效的实现某种模型。我真的见过有些机器学习的库实现某种算法是错误的。而高效的实现意味着可以快速验证不同的模型和参数。</li>
<li>系统具有灵活、深度的定制功能。</li>
<li>系统简单易用。</li>
<li>系统具有可扩展性, 可以从容处理更大的数据。</li>
</ol>
<p>到目前为止，xgboost 是我发现的唯一一个能够很好的满足上述所有要求的 machine learning package. 在此感谢青年才俊 陈天奇。</p>
<p>在效率方面，xgboost 高效的 c++ 实现能够通常能够比其它机器学习库更快的完成训练任务。</p>
<p>在灵活性方面，xgboost 可以深度定制每一个子分类器，并且可以灵活的选择 loss function（logistic，linear，softmax 等等）。除此之外，xgboost还提供了一系列在机器学习比赛中十分有用的功能，例如 early-stop， cv 等等在易用性方面，xgboost 提供了各种语言的封装，使得不同语言的用户都可以使用这个优秀的系统。</p>
<p>最后，在可扩展性方面，xgboost 提供了分布式训练（底层采用 rabit 接口），并且其分布式版本可以跑在各种平台之上，例如 mpi, yarn, spark 等等。</p>
<p>有了这么多优秀的特性，自然这个系统会吸引更多的人去使用它来参加 kaggle 比赛。</p>
<p>综上所述，理论模型，实际的数据，良好的系统实现，都是使得 tree-ensemble 在实际的 kaggle 比赛中“屡战屡胜”的原因。</p>
<h2 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h2><p>Bagging的代表算法是随机森林，简单说下随机森林的步骤：</p>
<p>(1) 对训练样本进行bootstrap采样，即有放回的采样，获得M个采样集合；<br>(2) 在这M个采样集合上训练处M个弱决策树。注意到，在决策树生成中还用到了列采样的技巧，原本决策树中节点分裂时，是选择当前节点中所有属性的最优属性进行划分的，但是列采样的技巧是在所有属性中的子集中选最优属性进行划分。这样做可以进一步降低过拟合的可能性；<br>(3) 对这M个训练出来的弱决策树进行集成。</p>
<h2 id="Stacking"><a href="#Stacking" class="headerlink" title="Stacking"></a>Stacking</h2><p>Stacking还没有代表性的算法，我姑且把它理解成一个集成的思想吧。具体做法是：</p>
<p>(1) 先将训练集D拆成k个大小相似但互不相交的子集D1,D2,…,Dk；<br>(2) 令Dj’= D - Dj，在Dj’上训练一个弱学习器Lj。将Dj作为测试集，获得Lj在Dj上的输出Dj’’；<br>(3) 步骤2可以得到k个弱学习器以及k个相应的输出Dj’’,这个k个输出加上原本的类标构成新的训练集Dn；<br>(4) 在Dn训练次学习器L，L即为最后的学习器。</p>
<p>以上Stacking只做了一层，据kaggle上的大神反馈，Stacking可以做好多层，会有神奇的效果。</p>
<p>下面给出kaggle中一个Stacking的实例，就是入门级的titanic那道题单层stacking的源码（只给出了stacking 的过程，前面特征工程处理的代码被省略掉了）。Stacking后的xgboost（得分:0.77990)比我之前只用xgboost时(得分:0.77512)提高了一点，排名上升了396…… <a href="https://github.com/xijunlee/kaggle-solution/blob/master/DigitRecognizer/DigitRec_CNN.py" target="_blank" rel="external">源码戳这</a></p>
<p>Log on 2017-6-22: Stacking了两次之后，得分从单次stacking的0.77990上升到了0.79904</p>
<p>Log on 2017-6-22: Stacking了三次之后，得分从两次stacking的0.77990降低到了0.78469。所以，Stacking并不是越多层越好，反而会变坏。</p>
<hr>
<p>Reference<br>《The Elements of Statistical Learning》<br>《统计学习方法》<br>《Practical Lessons from Predicting Clicks on Ads at Facebook》<br><a href="http://blog.csdn.net/puqutogether/article/details/44593647" target="_blank" rel="external">http://blog.csdn.net/puqutogether/article/details/44593647</a><br><a href="http://blog.csdn.net/suranxu007/article/details/49910323" target="_blank" rel="external">http://blog.csdn.net/suranxu007/article/details/49910323</a><br><a href="http://blog.csdn.net/lilyth_lilyth/article/details/48032119" target="_blank" rel="external">http://blog.csdn.net/lilyth_lilyth/article/details/48032119</a><br><a href="http://www.searchtb.com/2010/12/an-introduction-to-treelink.html" target="_blank" rel="external">http://www.searchtb.com/2010/12/an-introduction-to-treelink.html</a><br><a href="https://www.zhihu.com/question/45487317" target="_blank" rel="external">https://www.zhihu.com/question/45487317</a><br><a href="http://wakemeup.space/?p=187" target="_blank" rel="external">http://wakemeup.space/?p=187</a><br><a href="http://www.jianshu.com/p/005a4e6ac775" target="_blank" rel="external">http://www.jianshu.com/p/005a4e6ac775</a><br><a href="https://www.zhihu.com/question/41354392/answer/98658997" target="_blank" rel="external">https://www.zhihu.com/question/41354392/answer/98658997</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;看了不少集成学习的资料，很多算法都有相似之处，看了之后没有进行比较和整理，太容易忘记了，所以这篇来做个笔记。&lt;/p&gt;
&lt;p&gt;集成学习，（就我目前所学习到的）主要可以分为三大类，Boosting, Bagging, Stacking。Boosting的代表有AdaBoost, gbdt, xgboost。而Bagging的代表则是随机森林 (Random Forest)。Stacking 的话，好像还没有著名的代表，可以视其为一种集成的套路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://xijunlee.github.io/tags/Machine-Learning/"/>
    
      <category term="Ensembling" scheme="https://xijunlee.github.io/tags/Ensembling/"/>
    
  </entry>
  
  <entry>
    <title>关于Python语法的一些笔记（持续更新）</title>
    <link href="https://xijunlee.github.io/2017/04/16/%E5%85%B3%E4%BA%8EPython%E8%AF%AD%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/"/>
    <id>https://xijunlee.github.io/2017/04/16/关于Python语法的一些笔记/</id>
    <published>2017-04-16T12:56:37.000Z</published>
    <updated>2017-11-04T04:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>记录一些Python使用过程中的没见过或者优化的使用方法……</p>
<h3 id="什么是args和-kwargs？"><a href="#什么是args和-kwargs？" class="headerlink" title="什么是args和*kwargs？"></a>什么是<strong>args和*</strong>kwargs？</h3><p>先来看个例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'args = '</span>, args</div><div class="line">    <span class="keyword">print</span> <span class="string">'kwargs = '</span>, kwargs</div><div class="line">    <span class="keyword">print</span> <span class="string">'---------------------------------------'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">    foo(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</div><div class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</div><div class="line">    foo(<span class="string">'a'</span>, <span class="number">1</span>, <span class="keyword">None</span>, a=<span class="number">1</span>, b=<span class="string">'2'</span>, c=<span class="number">3</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">args =  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) </div><div class="line">kwargs =  &#123;&#125; </div><div class="line">--------------------------------------- </div><div class="line">args =  () </div><div class="line">kwargs =  &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125; </div><div class="line">--------------------------------------- </div><div class="line">args =  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) </div><div class="line">kwargs =  &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125; </div><div class="line">--------------------------------------- </div><div class="line">args =  (<span class="string">'a'</span>, <span class="number">1</span>, <span class="keyword">None</span>) </div><div class="line">kwargs =  &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="string">'2'</span>&#125; </div><div class="line">---------------------------------------</div></pre></td></tr></table></figure></p>
<p>可以看到，这两个是python中的可变参数。<em>args表示任何多个无名参数，它是一个tuple；**kwargs表示关键字参数，它是一个dict。并且同时使用</em>args和<strong>kwargs时，必须*args参数列要在</strong>kwargs前，像foo(a=1, b=’2’, c=3, a’, 1, None, )这样调用的话，会提示语法错误“SyntaxError: non-keyword arg after keyword arg”。</p>
<p> 还有一个很漂亮的用法，就是创建字典：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">kw_dict</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    <span class="keyword">return</span> kwargs</div><div class="line"><span class="keyword">print</span> kw_dict(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>) == &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</div></pre></td></tr></table></figure></p>
<p>其实python中就带有dict类，使用dict(a=1,b=2,c=3)即可创建一个字典了。</p>
<h3 id="lambda表达式以及实例"><a href="#lambda表达式以及实例" class="headerlink" title="lambda表达式以及实例"></a>lambda表达式以及实例</h3><p>lambda表达式可以理解成为匿名函数，其功能就是定义了一个函数，不过这个函数形式非常简单，通常是一行。过于复杂的函数还是正经定义的好。</p>
<h4 id="sorted函数中使用lambda表达式的例子："><a href="#sorted函数中使用lambda表达式的例子：" class="headerlink" title="sorted函数中使用lambda表达式的例子："></a>sorted函数中使用lambda表达式的例子：</h4><p>下面这个例子在很多list排序中使用到，故单独列出来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">points = [[<span class="number">10</span>,<span class="number">16</span>], [<span class="number">2</span>,<span class="number">8</span>], [<span class="number">1</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">12</span>]]</div><div class="line"><span class="comment">#用sorted函数来为list中的元素按照元素的第二位进行排序，key是排序的比较关键字，这里通过lambda表达式来给出关键字。</span></div><div class="line">points = sorted(points, key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>])</div></pre></td></tr></table></figure>
<h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子:"></a>简单例子:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g = <span class="keyword">lambda</span> x:x+<span class="number">1</span></div></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">g(<span class="number">1</span>)</div><div class="line">&gt;&gt;&gt;<span class="number">2</span></div><div class="line">g(<span class="number">2</span>)</div><div class="line">&gt;&gt;&gt;<span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>另外一种使用方式:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lambda</span> x:x+<span class="number">1</span>(<span class="number">1</span>)</div><div class="line">&gt;&gt;&gt;<span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>可以这样认为,lambda作为一个表达式，定义了一个匿名函数，上例的代码x为入口参数，x+1为函数体。非常容易理解，在这里lambda简化了函数定义的书写形式。使得代码更为简洁，但是使用函数的定义方式更为直观，易理解。</p>
<p>Python中，也有几个定义好的全局函数方便使用的，filter, map, reduce：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo = [<span class="number">2</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">24</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">27</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> filter(<span class="keyword">lambda</span> x: x % <span class="number">3</span> == <span class="number">0</span>, foo)</div><div class="line">[<span class="number">18</span>, <span class="number">9</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">27</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> map(<span class="keyword">lambda</span> x: x * <span class="number">2</span> + <span class="number">10</span>, foo)</div><div class="line">[<span class="number">14</span>, <span class="number">46</span>, <span class="number">28</span>, <span class="number">54</span>, <span class="number">44</span>, <span class="number">58</span>, <span class="number">26</span>, <span class="number">34</span>, <span class="number">64</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> reduce(<span class="keyword">lambda</span> x, y: x + y, foo)</div><div class="line"><span class="number">139</span></div></pre></td></tr></table></figure></p>
<h3 id="与-的区别"><a href="#与-的区别" class="headerlink" title="_与__的区别"></a>_与__的区别</h3><ol>
<li>使用_one_underline来表示该方法或属性是私有的，不属于API；</li>
<li>当创建一个用于python调用或一些特殊情况时，使用<strong>two_underline</strong>；</li>
<li>使用__just_to_underlines，来避免子类的重写！</li>
</ol>
<p>原文地址:<a href="http://igorsobreira.com/2010/09/16/difference-between-one-underline-and-two-underlines-in-python.html" target="_blank" rel="external">http://igorsobreira.com/2010/09/16/difference-between-one-underline-and-two-underlines-in-python.html</a></p>
<h4 id="“-”单下划线"><a href="#“-”单下划线" class="headerlink" title="“_”单下划线"></a>“_”单下划线</h4><p>Python中不存在真正的私有方法。为了实现类似于c++中私有方法，可以在类的方法或属性前加一个“_”单下划线，意味着该方法或属性不应该去调用，它并不属于API。</p>
<h4 id="“-”双下划线"><a href="#“-”双下划线" class="headerlink" title="“__”双下划线"></a>“__”双下划线</h4><p>这个双下划线更会造成更多混乱，但它并不是用来标识一个方法或属性是私有的，真正作用是用来避免子类覆盖其内容。</p>
<p>看一个栗子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__method</span><span class="params">(self)</span>:</span> </div><div class="line">        <span class="keyword">print</span> <span class="string">"I'm a method in A"</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span> </div><div class="line">        self.__method() </div><div class="line"></div><div class="line">a = A() a.method()</div><div class="line"></div><div class="line"><span class="comment">## 输出：</span></div><div class="line"></div><div class="line">$ python example.py </div><div class="line">I<span class="string">'m a method in A</span></div></pre></td></tr></table></figure>
<p>我们现在写一个类B，它继承了类A，并重新实现一个__method：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__method</span><span class="params">(self)</span>:</span> </div><div class="line">        <span class="keyword">print</span> <span class="string">"I'm a method in B"</span> </div><div class="line"></div><div class="line">b = B() </div><div class="line">b.method()</div></pre></td></tr></table></figure>
<p>现在，结果是这样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python example.py</div><div class="line">I<span class="string">'m a method in A</span></div></pre></td></tr></table></figure>
<p>就像我们看到的一样，B.method()不能调用B.<strong>method的方法。实际上，它是”</strong>“两个下划线的功能的正常显示。</p>
<p>因此，在我们创建一个以”__”两个下划线开始的方法时，这意味着这个方法不能被重写(override)，它只允许在该类的内部中使用。</p>
<p>在Python中如是做的？很简单，它只是把方法重命名了，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = A()</div><div class="line">a._A__method()  <span class="comment"># never use this!! please!</span></div><div class="line">$ python example.py </div><div class="line">I<span class="string">'m a method in A</span></div></pre></td></tr></table></figure></p>
<p>如果你试图调用a.<strong>method，它还是无法运行的，就如上面所说，只可以在类的内部调用</strong>method。</p>
<h4 id="“xx“前后各双下划线"><a href="#“xx“前后各双下划线" class="headerlink" title="“xx“前后各双下划线"></a>“<strong>xx</strong>“前后各双下划线</h4><p>当你看到”<strong>this</strong>“的时，就知道不要调用它。为什么？因为它的意思是它是用于Python调用的，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">"igor"</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>name.__len__() <span class="number">4</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(name) <span class="number">4</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>number = <span class="number">10</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>number.__add__(<span class="number">20</span>) <span class="number">30</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>number + <span class="number">20</span> <span class="number">30</span></div></pre></td></tr></table></figure></p>
<p>“<strong>xx</strong>”经常是操作符或本地函数调用的magic methods。在上面的例子中，提供了一种重写类的操作符的功能。</p>
<p>在特殊的情况下，它只是python调用的hook。例如，<strong>init</strong>()函数是当对象被创建初始化时调用的;<strong>new</strong>()是用来创建实例。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrazyNumber</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span> </div><div class="line">        self.n = n </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span> </div><div class="line">        <span class="keyword">return</span> self.n - other </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, other)</span>:</span> </div><div class="line">        <span class="keyword">return</span> self.n + other </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span> </div><div class="line">        <span class="keyword">return</span> str(self.n) </div><div class="line"></div><div class="line">num = CrazyNumber(<span class="number">10</span>) </div><div class="line"><span class="keyword">print</span> num <span class="comment"># 10</span></div><div class="line"><span class="keyword">print</span> num + <span class="number">5</span> <span class="comment"># 5</span></div><div class="line"><span class="keyword">print</span> num - <span class="number">20</span> <span class="comment"># 30</span></div></pre></td></tr></table></figure>
<h3 id="range和xrange的区别"><a href="#range和xrange的区别" class="headerlink" title="range和xrange的区别"></a>range和xrange的区别</h3><p><strong>range</strong><br>    函数说明：range([start,] stop[, step])，根据start与stop指定的范围以及step设定的步长，生成一个<strong>list</strong>。<br>range示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">5</span>) </div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>,<span class="number">5</span>) </div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>)</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<p><strong>xrange</strong><br>    函数说明：用法与range完全相同，所不同的是生成的不是一个数组，而是一个<strong>generator</strong>。<br>xrange示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>xrange(<span class="number">5</span>)</div><div class="line">xrange(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(xrange(<span class="number">5</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>xrange(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">xrange(<span class="number">1</span>, <span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(xrange(<span class="number">1</span>,<span class="number">5</span>))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>xrange(<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>)</div><div class="line">xrange(<span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(xrange(<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<p>由上面的示例可以知道：要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间，这两个基本上都是在循环的时候用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>): </div><div class="line">	<span class="keyword">print</span> i </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">100</span>): </div><div class="line">	<span class="keyword">print</span> i</div></pre></td></tr></table></figure>
<p>这两个输出的结果都是一样的，实际上有很多不同，range会直接生成一个list对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = range(<span class="number">0</span>,<span class="number">100</span>) </div><div class="line"><span class="keyword">print</span> type(a) </div><div class="line"><span class="keyword">print</span> a </div><div class="line"><span class="keyword">print</span> a[<span class="number">0</span>], a[<span class="number">1</span>]</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;type <span class="string">'list'</span>&gt;</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>]</div><div class="line"><span class="number">0</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>而xrange则不会直接生成一个list，而是每次调用返回其中的一个值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = xrange(<span class="number">0</span>,<span class="number">100</span>) </div><div class="line"><span class="keyword">print</span> type(a) </div><div class="line"><span class="keyword">print</span> a </div><div class="line"><span class="keyword">print</span> a[<span class="number">0</span>], a[<span class="number">1</span>]</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;type <span class="string">'xrange'</span>&gt;</div><div class="line">xrange(<span class="number">100</span>)</div><div class="line"><span class="number">0</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>所以<strong>xrange做循环的性能比range好，尤其是返回很大的时候，尽量用xrange吧</strong>，除非你是要返回一个列表。</p>
<h3 id="for循环中的"><a href="#for循环中的" class="headerlink" title="for循环中的_"></a>for循环中的<code>_</code></h3><p>一段代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">10</span>):</div><div class="line">	block</div></pre></td></tr></table></figure></p>
<p>如果循环中block不需要用到迭代值的话，我们可以不用给迭代值命名，用<code>_</code>就好。</p>
<h3 id="if-else语句的简单赋值"><a href="#if-else语句的简单赋值" class="headerlink" title="if-else语句的简单赋值"></a>if-else语句的简单赋值</h3><p>示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">20</span> <span class="keyword">if</span> b == <span class="number">2</span> <span class="keyword">else</span> <span class="number">3</span> <span class="comment">#如果b==2,则a被赋值为20，否则被赋值为3</span></div></pre></td></tr></table></figure></p>
<p>很多其他语言，如C++, Java都有这种赋值语句:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = b==<span class="number">2</span>? <span class="number">20</span>:<span class="number">3</span></div></pre></td></tr></table></figure></p>
<hr>
<p>Reference<br><a href="http://www.cnblogs.com/fengmk2/archive/2008/04/21/1163766.html" target="_blank" rel="external">http://www.cnblogs.com/fengmk2/archive/2008/04/21/1163766.html</a><br><a href="http://igorsobreira.com/2010/09/16/difference-between-one-underline-and-two-underlines-in-python.html" target="_blank" rel="external">http://igorsobreira.com/2010/09/16/difference-between-one-underline-and-two-underlines-in-python.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;记录一些Python使用过程中的没见过或者优化的使用方法……&lt;/p&gt;
&lt;h3 id=&quot;什么是args和-kwargs？&quot;&gt;&lt;a href=&quot;#什么是args和-kwargs？&quot; class=&quot;headerlink&quot; title=&quot;什么是args和*kwargs？&quot;&gt;&lt;/a&gt;什么是&lt;strong&gt;args和*&lt;/strong&gt;kwargs？&lt;/h3&gt;&lt;p&gt;先来看个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;args = &#39;&lt;/span&gt;, args&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;kwargs = &#39;&lt;/span&gt;, kwargs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;---------------------------------------&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    foo(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    foo(a=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,b=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,c=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    foo(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, a=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,b=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,c=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    foo(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;, a=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b=&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, c=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://xijunlee.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络为什么叫卷积呢？</title>
    <link href="https://xijunlee.github.io/2017/04/11/CNN/"/>
    <id>https://xijunlee.github.io/2017/04/11/CNN/</id>
    <published>2017-04-11T14:45:16.000Z</published>
    <updated>2017-11-06T13:09:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之前读过好一些关于卷积神经网络的入门文章，看完了之后还是觉得似懂非懂。特别是<strong>卷积网络为什么叫卷积</strong>呢？上次吃饭居然还跟小红他们就这个问题聊了一下。今天碰巧刷知乎刷到<a href="https://zhuanlan.zhihu.com/p/25249694" target="_blank" rel="external">这篇文章</a>，作者对CNN做了非常生动的解释，是我目前看到的关于CNN最好的中文解释。当然了，作者还就卷积网络中卷积层对图像特征的提取和池化层的降维做了很好的解释。文章最后又对一个已经学习好的CNN中的卷积层和全连接层进行了可视化，这让我这样的小白能非常直观地看出CNN到底最后学出了什么特征。这篇博文整理了原文中关于解释<strong>卷积神经网络为什么叫卷积</strong>的描述，更多内容可以直接去<a href="https://zhuanlan.zhihu.com/p/25249694" target="_blank" rel="external">原文</a>中。</p>
<h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p>我们在 2 维上说话。有两个$\mathcal{R}^2\rightarrow \mathcal{R}$的函数 f(x, y) 和 g(x, y) 。所谓 f 和 g 的卷积就是一个新的 $\mathcal{R}^2\rightarrow \mathcal{R}$的函数 c(x, y) 。通过下式得到：</p>
<a id="more"></a>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/eq1.png">
<p>这式子的含义是：遍览从负无穷到正无穷的全部 s 和 t 值，把 g 在 (x-s, y-t) 上的值乘以 f 在 (s, t) 上的值之后再“加和”到一起（积分意义上），得到 c 在 (x, y) 上的值。说白了卷积就是一种“加权求和”，f 为权。以 (x, y) 为中心，把 g 距离中心 (-s, -t) 位置上的值乘上 f 在 (s, t) 的值，最后加到一起。把卷积公式写成离散形式就更清楚了：</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/eq2.png">
<p>第二个等号成立是因为在这里我们每隔单位长度 1 一采样，$\Delta s$和$\Delta t$都是 1 。可以令 G 表示一幅 100 x 100 大小的灰度图像。G(x, y) 取值 [0,255] 区间内的整数，是图像在 (x, y) 的灰度值。x 和 y 坐标取 [0, 99] ，其它位置上 G 值全取 0 。令 F 在 s 和 t 取 {-1, 0, 1} 的位置为特定值，其他位置全取 0 。F 可以看作是一个 3 x 3 的网格。如图 1.1</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/1.1.png">
<p>图 1.1</p>
<p>图 1.1 中 G 每个小格子里的值就是图像在 (x, y) 的灰度值。F 每个小格子里的值就是 F 在 (s, t) 的取值。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/1.2.jpg">
<p>图 1.2</p>
<p>如图 1.2 所示，将 F 的中心 (0, 0) 对准 G 的 (6, 6) 。把 F 和 G 对应的 9 个位置上各自的值相乘，再将 9 个乘积加在一起，就得到了卷积值 C(6, 6) 。对 G 的每一个位置求 C 值，就得到了一幅新的图像。其中注意三点：</p>
<p>F 是上下左右翻转后再与 G 对准的。因为卷积公式中 F(s, t) 乘上的是 G(x-s, y-t) 。比如 F(-1, -1) 乘上的是 G(7, 7) ；<br>如果 F 的所有值之和不等于 1.0，则 C 值有可能不落在 [0, 255] 区间内，那就不是一个合法的图像灰度值。所以如果需要让结果是一幅图像，就得将 F 归一化——令它的所有位置之和等于 1.0 ；<br>对于 G 边缘上的点，有可能它的周围位置超出了图像边缘。此时可以把图像边缘之外的值当做 0 。或者只计算其周围都不超边缘的点的 C 。这样计算出来的图像就比原图像小一些。在上例中是小了一圈，如果 F 覆盖范围更大，那么小的圈数更多。<br>上述操作其实就是对数字图像进行离散卷积操作，又叫滤波。F 称作卷积核或滤波器。不同的滤波器起不同的作用。想象一下，如果 F 的大小是 3 x 3 ，每个格子里的值都是 1/9 。那么滤波就相当于对原图像每一个点计算它周围 3 x 3 范围内 9 个图像点的灰度平均值。这应该是一种模糊。看看效果。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/1.3.png">
<p>图 1.3</p>
<p>左图是 lena 灰度原图。中图用 3 x 3 值都为 1/9 的滤波器去滤，得到一个轻微模糊的图像。模糊程度不高是因为滤波器覆盖范围小。右图选取了 9 x 9 值为 1/81 的滤波器，模糊效果就较明显了。滤波器还有许多其他用处。例如下面这个滤波器：</p>
<p>+—+—+—+<br>| -1 |  0 |  1 |<br>+—+—+—+<br>| -2 |  0 |  2 |<br>+—+—+—+<br>| -1 |  0 |  1 |<br>+—+—+—+<br>注意该滤波器没有归一化（和不是 1.0 ），故滤出来的值可能不在 [0, 255] 之内。通过减去最小值、除以最大／最小值之差、再乘以 255 并取整，把结果值归一到 [0, 255] 之内，使之成为一幅灰度图像。现在尝试用它来滤 lena 图。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/1.4.png">
<p>图 1.4</p>
<p>该滤波器把图像的边缘检测出来了。它就是 Sobel 算子。边缘检测、图像模糊等等都是人们设计出来的、有专门用途的滤波器。如果搞一个 9 x 9 的随机滤波器，会是什么效果呢？</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/1.5.png">
<p>图 1.5</p>
<p>如上图，效果也类似于模糊。因为把一个像素点的值用它周围 9 x 9 范围的值随机加权求和，相当于“捣浆糊”。但可以看出模糊得并不润滑。</p>
<p>这时我们不禁要想，如果不是由人来设计一个滤波器，而是从一个随机滤波器开始，根据某种目标、用某种方法去逐渐调整它，直到它接近我们想要的样子，可行么？这就是卷积神经网络（Convolutional Neural Network, CNN）的思想了。可调整的<strong>滤波器</strong>是 CNN 的<strong>“卷积”</strong>那部分；如何<strong>调整滤波器</strong>则是 CNN 的<strong>“神经网络”</strong>那部分。</p>
<h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><p>现在把卷积滤波器和神经网络两个思想结合起来。卷积滤波器无非就是一套权值。而神经网络也可以有（除全连接外的）其它拓扑结构。可以构造如图 3.1 所示意的神经网络。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/3.1.jpg">
<p>图 3.1</p>
<p>该神经网络接受 n x n 个输入，产生 n x n 个输出。图中左边的平面包含 n x n 个格子，每个格子中是一个 [0, 255] 的整数值。它就是输入图像，也是这个神经网络的输入。右边的平面也是 n x n 个格子，每个格子是一个神经元。每个神经元连接到输入上它对应位置周围 3 x 3 范围内的值。每个连接有一个权值。所有神经元都如此连接（图中只画了一个，出了输入图像边缘的连接就认为连接到常数 0 ）。右边层的 n x n 个神经元的输出就是该神经网络的输出。</p>
<p>这个神经网络有两点与全连接神经网络不同。首先它不是全连接的。右层的神经元并非连接上全部输入，而是只连接了一部分。这里的一部分就是输入图像的一个局部区域。我们常听说 CNN 能够把握图像局部特征就是这个意思。这样一来权值少了很多，因为连接就少了。权值其实还更少，因为每一个神经元的 9 个权值都是和其他神经元共享的。全部 n x n 个神经元都用这共同的一组 9 个权值，并且不要偏置值。那么这个神经网络其实一共只有 9 个参数需要调整。</p>
<p>看了第一节的同学们都看出来了，这个神经网络不就是一个卷积滤波器么？只不过卷积核的参数未定，需要我们去训练——它是一个“可训练滤波器”。这个神经网络其实就是一个只有一个卷积层、且该卷积层只有一个滤波器（通道）的 CNN 。</p>
<p>试着用 Sobel 算子滤出来的图片作为目标值去训练这个神经网络。给神经网络的输入是灰度 lena 图，目标输出是经过 Sobel 算子滤波的 lena 图，见图 1.4 。这唯一的一对输入输出图片就构成了训练集。神经网络权值随机初始化，训练 2000 轮。如图 3.7 。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/3.2.jpg">
<p>图 3.2</p>
<p>从左上到右下依次为：初始随机滤波器输出、每个 200 轮训练后的滤波器输出（ 10 幅）、最后一幅是 Sobel 算子的输出，也就是用作训练的目标图像。可以看到经过最初 200 轮后，神经网络的输出就已经和 Sobel 算子的输出看不出什么差别了。后面那些轮的输出基本一样。输入与输出的均方误差 mse 随着训练轮次的变化。如图 3.3 。</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/intro_to_cnn/3.3.jpg">
<p>图 3.3</p>
<p>1500 轮过后，mse 基本就是 0 了。训练完成后网络的权值是：</p>
<p>+——————-+——————–+——————–+<br>| 1.2886529   |  0.04068733  |  -1.3082279  |<br>+——————-+——————–+——————–+<br>| 1.43157125  |  0.01173212  |  -1.45389295 |<br>+——————-+——————–+——————–+<br>| 1.34158182  |  -0.07245208 |  -1.27504027 |<br>+——————-+——————–+——————–+<br>与 Sobel 算子比较一下：</p>
<p>+—+—+—+<br>| -1 |  0 |  1 |<br>+—+—+—+<br>| -2 |  0 |  2 |<br>+—+—+—+<br>| -1 |  0 |  1 |<br>+—+—+—+</p>
<p>注意训练出来的滤波器负数列在右侧而不是左侧。因为计算卷积是把滤波器上下左右翻转反着扣上去的。这并不重要，本质是相同的。关键是一正列、一负列，中间零值列。非零值列三个值之比近似 1:2:1 。我们得到的就是一个近似的 Sobel 算子。我们以训练神经网络的方式把一个随机滤波器训练成了 Sobel 算子。这就是优化的魔力（代码见本文最后）。</p>
<p>在 CNN 中，这样的滤波器层叫做卷积层。一个卷积层可以有多个滤波器，每一个叫做一个通道，或者叫做一个 feature map 。可以给卷积层的输出施加某个激活函数：Sigmoid 、Tanh 等等。激活函数也构成 CNN 的一层——激活层，这样的层没有可训练的参数。</p>
<p>还有一种层叫做 Pooling 层（池化层）。它也没有参数，起到降维的作用。将输入切分成不重叠的一些 n x n 区域。每一个区域就包含 n x n 个值。从这 n x n 个值计算出一个值。计算方法可以是求平均、取最大等等。假设 n = 2，那么 4 个输入变成一个输出。输出图像就是输入图像的 1/4 大小。若把 2 维的层展平成一维向量，后面可再连接一个全连接前向神经网络。</p>
<p>通过把这些组件进行组合就得到了一个 CNN 。它直接以原始图像为输入，以最终的回归或分类问题的结论为输出，内部兼有滤波图像处理和函数拟合，所有参数放在一起训练。这就是卷积神经网络。</p>
<p>以上提供了一个理解 CNN 的视角。CNN 的发明并非沿着此思路。像 NN 本身一样，CNN 的思想来源于对生物视觉神经系统的研究。</p>
<hr>
<p>Reference<br>［1］<a href="https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26732914/" target="_blank" rel="external">《最优化导论》（美）Edwin K. P. Chong（美） Stanislaw H. Zak</a><br>［2］<a href="https://link.zhihu.com/?target=https%3A//book.douban.com/subject/1115600/" target="_blank" rel="external">《神经网络设计》（美）Martin T. Hagan（美）Howard B. Demuth（美）Mark Beale</a><br>［3］<a href="https://link.zhihu.com/?target=https%3A//book.douban.com/subject/1102235/" target="_blank" rel="external">《机器学习》（美）Tom Mitchell</a><br>［4］<a href="https://link.zhihu.com/?target=https%3A//book.douban.com/subject/2068931/" target="_blank" rel="external">《神经计算原理》（美）Fredric M. Han（美）Ivica Kostanic</a><br>［5］<a href="https://link.zhihu.com/?target=https%3A//book.douban.com/subject/3587732/" target="_blank" rel="external">《人工智能——复杂问题求解的结构和策略》（美）George F. Luger</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;之前读过好一些关于卷积神经网络的入门文章，看完了之后还是觉得似懂非懂。特别是&lt;strong&gt;卷积网络为什么叫卷积&lt;/strong&gt;呢？上次吃饭居然还跟小红他们就这个问题聊了一下。今天碰巧刷知乎刷到&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25249694&quot;&gt;这篇文章&lt;/a&gt;，作者对CNN做了非常生动的解释，是我目前看到的关于CNN最好的中文解释。当然了，作者还就卷积网络中卷积层对图像特征的提取和池化层的降维做了很好的解释。文章最后又对一个已经学习好的CNN中的卷积层和全连接层进行了可视化，这让我这样的小白能非常直观地看出CNN到底最后学出了什么特征。这篇博文整理了原文中关于解释&lt;strong&gt;卷积神经网络为什么叫卷积&lt;/strong&gt;的描述，更多内容可以直接去&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25249694&quot;&gt;原文&lt;/a&gt;中。&lt;/p&gt;
&lt;h2 id=&quot;卷积&quot;&gt;&lt;a href=&quot;#卷积&quot; class=&quot;headerlink&quot; title=&quot;卷积&quot;&gt;&lt;/a&gt;卷积&lt;/h2&gt;&lt;p&gt;我们在 2 维上说话。有两个$\mathcal{R}^2\rightarrow \mathcal{R}$的函数 f(x, y) 和 g(x, y) 。所谓 f 和 g 的卷积就是一个新的 $\mathcal{R}^2\rightarrow \mathcal{R}$的函数 c(x, y) 。通过下式得到：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://xijunlee.github.io/tags/Machine-Learning/"/>
    
      <category term="CNN" scheme="https://xijunlee.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>A Summary of Bit Manipulation (reposted from leetcode discussion)</title>
    <link href="https://xijunlee.github.io/2017/04/01/efficiently/"/>
    <id>https://xijunlee.github.io/2017/04/01/efficiently/</id>
    <published>2017-04-01T05:46:11.000Z</published>
    <updated>2017-11-06T13:09:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WIKI"><a href="#WIKI" class="headerlink" title="WIKI"></a>WIKI</h2><p>Bit manipulation is the act of algorithmically manipulating bits or other pieces of data shorter than a word. Computer programming tasks that require bit manipulation include low-level device control, error detection and correction algorithms, data compression, encryption algorithms, and optimization. For most other tasks, modern programming languages allow the programmer to work directly with abstractions instead of bits that represent those abstractions. Source code that does bit manipulation makes use of the bitwise operations: AND, OR, XOR, NOT, and bit shifts.</p>
<p>Bit manipulation, in some cases, can obviate or reduce the need to loop over a data structure and can give many-fold speed ups, as bit manipulations are processed in parallel, but the code can become more difficult to write and maintain.</p>
<a id="more"></a>
<h2 id="DETAILS"><a href="#DETAILS" class="headerlink" title="DETAILS"></a>DETAILS</h2><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><p>At the heart of bit manipulation are the bit-wise operators &amp; (and), | (or), ~ (not) and ^ (exclusive-or, xor) and shift operators a &lt;&lt; b and a &gt;&gt; b.</p>
<blockquote>
<p>There is no boolean operator counterpart to bitwise exclusive-or, but there is a simple explanation. The exclusive-or operation takes two inputs and returns a 1 if either one or the other of the inputs is a 1, but not if both are. That is, if both inputs are 1 or both inputs are 0, it returns 0. Bitwise exclusive-or, with the operator of a caret, ^, performs the exclusive-or operation on each pair of bits. Exclusive-or is commonly abbreviated XOR.</p>
</blockquote>
<ol>
<li>Set union A | B</li>
<li>Set intersection A &amp; B</li>
<li>Set subtraction A &amp; ~B</li>
<li>Set negation ALL_BITS ^ A or ~A</li>
<li>Set bit A |= 1 &lt;&lt; bit</li>
<li>Clear bit A &amp;= ~(1 &lt;&lt; bit)</li>
<li>Test bit (A &amp; 1 &lt;&lt; bit) != 0</li>
<li>Extract last bit A&amp;-A or A&amp;~(A-1) or x^(x&amp;(x-1))</li>
<li>Remove last bit A&amp;(A-1)</li>
<li>Get all 1-bits ~0</li>
</ol>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Count the number of ones in the binary representation of the given number</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_one</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(n) &#123;</div><div class="line">        n = n&amp;(n<span class="number">-1</span>);</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Is power of four (actually map-checking, iterative and recursive methods can do the same)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> !(n&amp;(n<span class="number">-1</span>)) &amp;&amp; (n&amp;<span class="number">0x55555555</span>);</div><div class="line">    <span class="comment">//check the 1-bit location;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="tricks"><a href="#tricks" class="headerlink" title="^ tricks"></a><code>^</code> tricks</h3><p>Use <code>^</code> to remove even exactly same numbers and save the odd, or save the distinct bits and remove the same.</p>
<h4 id="SUM-OF-TWO-INTEGERS"><a href="#SUM-OF-TWO-INTEGERS" class="headerlink" title="SUM OF TWO INTEGERS"></a>SUM OF TWO INTEGERS</h4><p>Use <code>^</code> and <code>&amp;</code> to add two integers</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> b==<span class="number">0</span>? a:getSum(a^b, (a&amp;b)&lt;&lt;<span class="number">1</span>); <span class="comment">//be careful about the terminating condition;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MISSING-NUMBER"><a href="#MISSING-NUMBER" class="headerlink" title="MISSING NUMBER"></a>MISSING NUMBER</h4><p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array. For example, Given nums = [0, 1, 3] return 2. (Of course, you can do this by math.)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</div><div class="line">        ret ^= i;</div><div class="line">        ret ^= nums[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret^=nums.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="tricks-1"><a href="#tricks-1" class="headerlink" title="| tricks"></a><code>|</code> tricks</h3><p>Keep as many 1-bits as possible</p>
<p>Find the largest power of 2 (most significant bit in binary form), which is less than or equal to the given number N.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">largest_power</span><span class="params">(<span class="keyword">long</span> N)</span> </span>&#123;</div><div class="line">    <span class="comment">//changing all right side bits to 1.</span></div><div class="line">    N = N | (N&gt;&gt;<span class="number">1</span>);</div><div class="line">    N = N | (N&gt;&gt;<span class="number">2</span>);</div><div class="line">    N = N | (N&gt;&gt;<span class="number">4</span>);</div><div class="line">    N = N | (N&gt;&gt;<span class="number">8</span>);</div><div class="line">    N = N | (N&gt;&gt;<span class="number">16</span>);</div><div class="line">    <span class="keyword">return</span> (N+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="REVERSE-BITS"><a href="#REVERSE-BITS" class="headerlink" title="REVERSE BITS"></a>REVERSE BITS</h4><p>Reverse bits of a given 32 bits unsigned integer.</p>
<p>Solution</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">uint32_t</span> reverseBits(<span class="keyword">uint32_t</span> n) &#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mask = <span class="number">1</span>&lt;&lt;<span class="number">31</span>, res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) res |= mask;</div><div class="line">        mask &gt;&gt;= <span class="number">1</span>;</div><div class="line">        n &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">uint32_t</span> reverseBits(<span class="keyword">uint32_t</span> n) &#123;</div><div class="line">	<span class="keyword">uint32_t</span> mask = <span class="number">1</span>, ret = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)&#123;</div><div class="line">		ret &lt;&lt;= <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(mask &amp; n) ret |= <span class="number">1</span>;</div><div class="line">		mask &lt;&lt;= <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="amp-tricks"><a href="#amp-tricks" class="headerlink" title="&amp; tricks"></a><code>&amp;</code> tricks</h3><p>Just selecting certain bits</p>
<p>Reversing the bits in integer</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x = ((x &amp; <span class="number">0xaaaaaaaa</span>) &gt;&gt; <span class="number">1</span>) | ((x &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>);</div><div class="line">x = ((x &amp; <span class="number">0xcccccccc</span>) &gt;&gt; <span class="number">2</span>) | ((x &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>);</div><div class="line">x = ((x &amp; <span class="number">0xf0f0f0f0</span>) &gt;&gt; <span class="number">4</span>) | ((x &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span>);</div><div class="line">x = ((x &amp; <span class="number">0xff00ff00</span>) &gt;&gt; <span class="number">8</span>) | ((x &amp; <span class="number">0x00ff00ff</span>) &lt;&lt; <span class="number">8</span>);</div><div class="line">x = ((x &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span>) | ((x &amp; <span class="number">0x0000ffff</span>) &lt;&lt; <span class="number">16</span>);</div></pre></td></tr></table></figure>
<h4 id="BITWISE-AND-OF-NUMBERS-RANGE"><a href="#BITWISE-AND-OF-NUMBERS-RANGE" class="headerlink" title="BITWISE AND OF NUMBERS RANGE"></a>BITWISE AND OF NUMBERS RANGE</h4><p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive. For example, given the range [5, 7], you should return 4.</p>
<p>Solution<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(m != n) &#123;</div><div class="line">        m &gt;&gt;= <span class="number">1</span>;</div><div class="line">        n &gt;&gt;= <span class="number">1</span>;</div><div class="line">        a++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> m&lt;&lt;a; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="NUMBER-OF-1-BITS"><a href="#NUMBER-OF-1-BITS" class="headerlink" title="NUMBER OF 1 BITS"></a>NUMBER OF 1 BITS</h4><p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>
<p>Solution<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(n) &#123;</div><div class="line">		n = n&amp;(n<span class="number">-1</span>);</div><div class="line">		count++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</div><div class="line">    ulong mask = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)&#123; <span class="comment">//31 will not do, delicate;</span></div><div class="line">        <span class="keyword">if</span>(mask &amp; n) count++;</div><div class="line">        mask &lt;&lt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>Reference<br><a href="https://discuss.leetcode.com/topic/50315/a-summary-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently" target="_blank" rel="external">https://discuss.leetcode.com/topic/50315/a-summary-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WIKI&quot;&gt;&lt;a href=&quot;#WIKI&quot; class=&quot;headerlink&quot; title=&quot;WIKI&quot;&gt;&lt;/a&gt;WIKI&lt;/h2&gt;&lt;p&gt;Bit manipulation is the act of algorithmically manipulating bits or other pieces of data shorter than a word. Computer programming tasks that require bit manipulation include low-level device control, error detection and correction algorithms, data compression, encryption algorithms, and optimization. For most other tasks, modern programming languages allow the programmer to work directly with abstractions instead of bits that represent those abstractions. Source code that does bit manipulation makes use of the bitwise operations: AND, OR, XOR, NOT, and bit shifts.&lt;/p&gt;
&lt;p&gt;Bit manipulation, in some cases, can obviate or reduce the need to loop over a data structure and can give many-fold speed ups, as bit manipulations are processed in parallel, but the code can become more difficult to write and maintain.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Bit Manipulation" scheme="https://xijunlee.github.io/tags/Bit-Manipulation/"/>
    
      <category term="Programing Tricks" scheme="https://xijunlee.github.io/tags/Programing-Tricks/"/>
    
  </entry>
  
  <entry>
    <title>sklearn中SVM调参说明及经验总结</title>
    <link href="https://xijunlee.github.io/2017/03/29/sklearn%E4%B8%ADSVM%E8%B0%83%E5%8F%82%E8%AF%B4%E6%98%8E%E5%8F%8A%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://xijunlee.github.io/2017/03/29/sklearn中SVM调参说明及经验总结/</id>
    <published>2017-03-29T12:47:23.000Z</published>
    <updated>2017-11-06T13:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之前只停留在理论上，没有实际沉下心去调参，实际去做了后，发现调参是个大工程（玄学）。于是这篇来总结一下<code>sklearn</code>中svm的参数说明以及调参经验。方便以后查询和回忆。</p>
<h2 id="常用核函数"><a href="#常用核函数" class="headerlink" title="常用核函数"></a>常用核函数</h2><p>1.linear核函数: $$K(x_i,x_j)=x_i^Tx_j$$<br><a id="more"></a><br>2.polynomial核函数: $$K(x_i,x_j)=(\gamma x_i^Tx_j + r)^d, d&gt;1$$<br>3.RBF核函数（高斯核函数）: $$K(x_i,x_j)=exp(-\gamma ||x_i-x_j||^2),\gamma&gt;0$$<br>4.sigmoid核函数: $$K(x_i,x_j)=tanh(\gamma x_i^Tx_j + r ), \gamma&gt;0, r&lt;0$$</p>
<h2 id="sklearn-svm-相关参数的官方说明"><a href="#sklearn-svm-相关参数的官方说明" class="headerlink" title="sklearn svm 相关参数的官方说明"></a>sklearn svm 相关参数的官方说明</h2><p>Parameters:<br><code>C</code> : float, optional (default=1.0). Penalty parameter C of the error term.<br><code>kernel</code> : string, optional (default=’rbf’). Specifies the kernel type to be used in the algorithm. It must be one of ‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’ or a callable. If none is given, ‘rbf’ will be used. If a callable is given it is used to pre-compute the kernel matrix from data matrices; that matrix should be an array of shape (n_samples, n_samples).<br><code>degree</code> : int, optional (default=3). Degree of the polynomial kernel function (‘poly’). Ignored by all other kernels.<br><code>gamma</code> : float, optional (default=’auto’). Kernel coefficient for ‘rbf’, ‘poly’ and ‘sigmoid’. If gamma is ‘auto’ then 1/n_features will be used instead.<br><code>coef0</code> : float, optional (default=0.0). Independent term in kernel function. It is only significant in ‘poly’ and ‘sigmoid’.<br><code>probability</code> : boolean, optional (default=False). Whether to enable probability estimates. This must be enabled prior to calling fit, and will slow down that method.<br><code>shrinking</code> : boolean, optional (default=True). Whether to use the shrinking heuristic.<br><code>tol</code> : float, optional (default=1e-3). Tolerance for stopping criterion.<br><code>cache_size</code> : float, optional. Specify the size of the kernel cache (in MB).<br><code>class_weight</code> : {dict, ‘balanced’}, optional. Set the parameter C of class i to class_weight[i]<em>C for SVC. If not given, all classes are supposed to have weight one. The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes </em> np.bincount(y))<br><code>verbose</code> : bool, default: False. Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.<br><code>max_iter</code> : int, optional (default=-1). Hard limit on iterations within solver, or -1 for no limit.<br><code>decision_function_shape</code> : ‘ovo’, ‘ovr’ or None, default=None. Whether to return a one-vs-rest (‘ovr’) decision function of shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one (‘ovo’) decision function of libsvm which has shape (n_samples, n_classes * (n_classes - 1) / 2). The default of None will currently behave as ‘ovo’ for backward compatibility and raise a deprecation warning, but will change ‘ovr’ in 0.19.<br>New in version 0.17: decision_function_shape=’ovr’ is recommended.<br>Changed in version 0.17: Deprecated decision_function_shape=’ovo’ and None.<br><code>random_state</code> : int seed, RandomState instance, or None (default). The seed of the pseudo random number generator to use when shuffling the data for probability estimation.</p>
<h2 id="libsvm中参数说明"><a href="#libsvm中参数说明" class="headerlink" title="libsvm中参数说明"></a>libsvm中参数说明</h2><p>因为sklearn底层是调用libsvm的，因此sklearn中svm参数说明是可以直接参考libsvm中的。</p>
<p>1.linear核函数: $$K(x_i,x_j)=x_i^Tx_j$$<br>2.polynomial核函数: $$K(x_i,x_j)=(\gamma x_i^Tx_j + r)^d, d&gt;1$$<br>3.RBF核函数（高斯核函数）: $$K(x_i,x_j)=exp(-\gamma ||x_i-x_j||^2),\gamma&gt;0$$<br>4.sigmoid核函数: $$K(x_i,x_j)=tanh(\gamma x_i^Tx_j + r ), \gamma&gt;0, r&lt;0$$</p>
<p>首先介绍下与核函数相对应的参数：<br>1）对于线性核函数，没有专门需要设置的参数<br>2）对于多项式核函数，有三个参数。-d用来设置多项式核函数的最高次项次数，也就是公式中的d，默认值是3。-g用来设置核函数中的gamma参数设置，也就是公式中的gamma，默认值是1/k（特征数）。-r用来设置核函数中的coef0，也就是公式中的第二个r，默认值是0。<br>3）对于RBF核函数，有一个参数。-g用来设置核函数中的gamma参数设置，也就是公式中gamma，默认值是1/k（k是特征数）。<br>4）对于sigmoid核函数，有两个参数。-g用来设置核函数中的gamma参数设置，也就是公式中gamma，默认值是1/k（k是特征数）。-r用来设置核函数中的coef0，也就是公式中的第二个r，默认值是0。</p>
<p><strong> 具体来说说rbf核函数中C和gamma </strong>：</p>
<p>SVM模型有两个非常重要的参数C与gamma。其中 C是惩罚系数，即对误差的宽容度。c越高，说明越不能容忍出现误差,容易过拟合。C越小，容易欠拟合。C过大或过小，泛化能力变差</p>
<p>gamma是选择RBF函数作为kernel后，该函数自带的一个参数。隐含地决定了数据映射到新的特征空间后的分布，gamma越大，支持向量越少，gamma值越小，支持向量越多。支持向量的个数影响训练与预测的速度。</p>
<p>这里面大家需要注意的就是gamma的物理意义，大家提到很多的RBF的幅宽，它会影响每个支持向量对应的高斯的作用范围，从而影响泛化性能。我的理解：如果gamma设的太大，方差会很小，方差很小的高斯分布长得又高又瘦， 会造成只会作用于支持向量样本附近，对于未知样本分类效果很差，存在训练准确率可以很高，(如果让方差无穷小，则理论上，高斯核的SVM可以拟合任何非线性数据，但容易过拟合)而测试准确率不高的可能，就是通常说的过训练；而如果设的过小，则会造成平滑效应太大，无法在训练集上得到特别高的准确率，也会影响测试集的准确率。</p>
<p>此外，可以明确的两个结论是：<br>结论1：样本数目少于特征维度并不一定会导致过拟合，这可以参考余凯老师的这句评论：<br>“这不是原因啊，呵呵。用RBF kernel, 系统的dimension实际上不超过样本数，与特征维数没有一个trivial的关系。”</p>
<p>结论2：RBF核应该可以得到与线性核相近的效果（按照理论，RBF核可以模拟线性核），可能好于线性核，也可能差于，但是，不应该相差太多。<br>当然，很多问题中，比如维度过高，或者样本海量的情况下，大家更倾向于用线性核，因为效果相当，但是在速度和模型大小方面，线性核会有更好的表现。</p>
<hr>
<p>Reference<br><a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC" target="_blank" rel="external">http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC</a><br><a href="http://blog.csdn.net/lqhbupt/article/details/8610443" target="_blank" rel="external">http://blog.csdn.net/lqhbupt/article/details/8610443</a><br><a href="http://blog.csdn.net/lujiandong1/article/details/46386201" target="_blank" rel="external">http://blog.csdn.net/lujiandong1/article/details/46386201</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;之前只停留在理论上，没有实际沉下心去调参，实际去做了后，发现调参是个大工程（玄学）。于是这篇来总结一下&lt;code&gt;sklearn&lt;/code&gt;中svm的参数说明以及调参经验。方便以后查询和回忆。&lt;/p&gt;
&lt;h2 id=&quot;常用核函数&quot;&gt;&lt;a href=&quot;#常用核函数&quot; class=&quot;headerlink&quot; title=&quot;常用核函数&quot;&gt;&lt;/a&gt;常用核函数&lt;/h2&gt;&lt;p&gt;1.linear核函数: $$K(x_i,x_j)=x_i^Tx_j$$&lt;br&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://xijunlee.github.io/tags/Machine-Learning/"/>
    
      <category term="SVM" scheme="https://xijunlee.github.io/tags/SVM/"/>
    
  </entry>
  
  <entry>
    <title>reddit上有趣的SVM图解</title>
    <link href="https://xijunlee.github.io/2017/03/13/reddit%E4%B8%8A%E7%9B%B4%E8%A7%82%E6%9C%89%E8%B6%A3%E7%9A%84SVM%E8%A7%A3%E9%87%8A/"/>
    <id>https://xijunlee.github.io/2017/03/13/reddit上直观有趣的SVM解释/</id>
    <published>2017-03-13T05:26:10.000Z</published>
    <updated>2017-11-06T13:09:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这是目前看到过的对SVM的最直观的解释，原题目名还叫作<a href="https://www.reddit.com/r/MachineLearning/comments/15zrpp/please_explain_support_vector_machines_svm_like_i/" target="_blank" rel="external">Please explain Support Vector Machines (SVM) like I am a 5 year old</a>。于是，稍微整理下放到博客里。我个人认为，它对SVM中<code>kernel function</code>解释地相当形象。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Found <a href="https://www.reddit.com/r/MachineLearning/comments/15zrpp/please_explain_support_vector_machines_svm_like_i/" target="_blank" rel="external">this</a> on Reddit <a href="https://www.reddit.com/r/MachineLearning/" target="_blank" rel="external">r/machinelearning</a></p>
<p>(In related news, there’s a machine learning subreddit. Wow.)</p>
<a id="more"></a>
<p><a href="https://en.wikipedia.org/wiki/Support_vector_machine" target="_blank" rel="external">Support Vector Machines</a> (warning: Wikipedia dense article alert in previous link!) are learning models used for classification: which individuals in a population belong where? So… how do SVM and the mysterious “kernel” work?</p>
<p>The user curious_thoughts asked for an explanation of SVMs like s/he was a five year old. User copperking stepped up to the plate:</p>
<p>We have 2 colors of balls on the table that we want to separate.</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/svm_reddit/svm1.png">
<p>We get a stick and put it on the table, this works pretty well right?</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/svm_reddit/svm2.png">
<p>Some villain comes and places more balls on the table, it kind of works but one of the balls is on the wrong side and there is probably a better place to put the stick now.</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/svm_reddit/svm3.png">
<p>SVMs try to put the stick in the best possible place by having as big a gap on either side of the stick as possible.</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/svm_reddit/svm4.png">
<p>Now when the villain returns the stick is still in a pretty good spot.</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/svm_reddit/svm5.png">
<p>There is another trick in the SVM toolbox that is even more important. Say the villain has seen how good you are with a stick so he gives you a new challenge.</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/svm_reddit/svm6.png">
<p>There’s no stick in the world that will let you split those balls well, so what do you do? You flip the table of course! Throwing the balls into the air. Then, with your pro ninja skills, you grab a sheet of paper and slip it between the balls.</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/svm_reddit/svm6.png">
<p>Now, looking at the balls from where the villain is standing, they balls will look split by some curvy line.</p>
<img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/svm_reddit/svm7.png">
<p>Boring adults the call balls data, the stick a classifier, the biggest gap trick optimization, call flipping the table kernelling and the piece of paper a hyperplane.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;这是目前看到过的对SVM的最直观的解释，原题目名还叫作&lt;a href=&quot;https://www.reddit.com/r/MachineLearning/comments/15zrpp/please_explain_support_vector_machines_svm_like_i/&quot;&gt;Please explain Support Vector Machines (SVM) like I am a 5 year old&lt;/a&gt;。于是，稍微整理下放到博客里。我个人认为，它对SVM中&lt;code&gt;kernel function&lt;/code&gt;解释地相当形象。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;Found &lt;a href=&quot;https://www.reddit.com/r/MachineLearning/comments/15zrpp/please_explain_support_vector_machines_svm_like_i/&quot;&gt;this&lt;/a&gt; on Reddit &lt;a href=&quot;https://www.reddit.com/r/MachineLearning/&quot;&gt;r/machinelearning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(In related news, there’s a machine learning subreddit. Wow.)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://xijunlee.github.io/tags/Machine-Learning/"/>
    
      <category term="SVM" scheme="https://xijunlee.github.io/tags/SVM/"/>
    
  </entry>
  
  <entry>
    <title>GitMemo: Working with Git on Windows</title>
    <link href="https://xijunlee.github.io/2017/02/21/GitMemo-Working-with-Git-on-Windows-repost/"/>
    <id>https://xijunlee.github.io/2017/02/21/GitMemo-Working-with-Git-on-Windows-repost/</id>
    <published>2017-02-21T13:41:38.000Z</published>
    <updated>2017-11-06T13:09:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h2><p>Setting up Git can be tricky on Windows compared to Linux or Mac, but if you follow the steps in this guide, you should have no problems using Git on Windows. This guide will take you through the steps to install and configure Git and connect it to remote repositories to clone, push, and pull. </p>
<a id="more"></a>
<h2 id="Choosing-a-Git-distribution"><a href="#Choosing-a-Git-distribution" class="headerlink" title="Choosing a Git distribution"></a>Choosing a Git distribution</h2><p>There are two competing Git packages for Windows: a <a href="http://www.cygwin.com" target="_blank" rel="external">Cygwin-based</a> Git and a version called <a href="https://git-for-windows.github.io" target="_blank" rel="external">msysGit</a>. I will describe how to install the msysGit package. I recommend installing msysGit because I’ve found it’s easier to work with than the Cygwin based installation.</p>
<h2 id="Installing-Git"><a href="#Installing-Git" class="headerlink" title="Installing Git"></a>Installing Git</h2><p>Once you have downloaded the msysGit executable, double click on it to start the installation wizard. Leave the default directory options. When you get to the “Adjusting your Path environment” setting, select the “Run Git from the Windows Command Prompt” option. Choosing this option will make it easy for you to run Git commands from the Windows Command Prompt (command line) if you choose. Command Prompt is a simple tool, where you can run commands, switch through folders, manage files and it can be ran by selecting RUN… in START menu, and executing <code>cmd</code>command.</p>
<p><strong> Note </strong> : I recommend that you better choose the default options when installing <code>msysGit</code> for saving your time and mind.</p>
<p>You will notice that for the rest of this article we will use Git Bash for running Git commands. The Git Bash tool works in the same way as the default Windows’ Command Prompt, but has some special features. With Git Bash you’ll be able to use a number of UNIX command line tools along with access to Git, and we recommend it since it’s often simpler to use than the Windows Command Prompt.</p>
<p>You can run it by right clicking your mouse on the desktop, and selecting Git Bash from pop up window.</p>
<p><strong> Important note </strong>: The most common problems when setting up Git on Windows are related to SSH keys. Git uses SSH keys to securely access your repositories, and in Windows SSH keys are often searched on the wrong path when you try to use Git.</p>
<p>If you use an older version of msysGit, you may encounter a step called “Choosing the SSH executables”. If you encounter that dialog, we recommend that you choose the “Use OpenSSH” option.</p>
<p>After you have successfully installed Git on Windows, you’ll need to provide secure communication with your Git repositories by creating and installing SSH keys.</p>
<h2 id="Installing-SSH-keys-on-Windows"><a href="#Installing-SSH-keys-on-Windows" class="headerlink" title="Installing SSH keys on Windows"></a>Installing SSH keys on Windows</h2><p>To access your Git repositories you will need to create and install SSH keys. You can do this using OpenSSH and generate SSH keys with <code>ssh-keygen</code></p>
<h3 id="Using-OpenSSH-and-generating-SSH-keys-with-ssh-keygen"><a href="#Using-OpenSSH-and-generating-SSH-keys-with-ssh-keygen" class="headerlink" title="Using OpenSSH and generating SSH keys with ssh-keygen"></a>Using OpenSSH and generating SSH keys with ssh-keygen</h3><p>To communicate with the remote Git repository from your Windows computer, you will need to generate an SSH key pair for that computer. This process requires only a few steps, but you do first need to install <code>msysGit</code> using the full installer as described above.</p>
<h4 id="Generating-a-key-pair"><a href="#Generating-a-key-pair" class="headerlink" title="Generating a key pair"></a>Generating a key pair</h4><p>To do this you need to run Git Bash, which can be found in your START menu. Run the command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C youremail@xxx.xxx</div></pre></td></tr></table></figure>
<p>Next, there will be several messages that asks you to set pass phrase. You could keep entering <code>return</code> key to skip these askings.</p>
<p>Now that the keys are generated, open the file id_rsa.pub (found in the default location from the previous step) with a text editor. The contents of this file is your new public key. If you copy it to your clipboard, you can add it to your git SSH keys.</p>
<p>Your SSH public key should look something like this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyyA8wePstPC69PeuHFtOwyTecByonsHFAjHbVnZ+h0dpomvLZxUtbknNj3+</div><div class="line">c7MPYKqKBOx9gUKV/diR/mIDqsb405MlrI1kmNR9zbFGYAAwIH/Gxt0Lv5ffwaqsz7cECHBbMojQGEz3IH3twEvDfF6cu5p</div><div class="line">00QfP0MSmEi/eB+W+h30NGdqLJCziLDlp409jAfXbQm/4Yx7apLvEmkaYSrb5f/pfvYv1FEV1tS8/J7DgdHUAWo6gyGUUSZ</div><div class="line">JgsyHcuJT7v9Tf0xwiFWOWL9WsWXa9fCKqTeYnYJhHlqfinZRnT/+jkz0OZ7YmXo6j4Hyms3RCOqenIX1W6gnIn+eQIkw==</div><div class="line">Mac Pro</div></pre></td></tr></table></figure>
<h3 id="Adding-your-SSH-public-key-to-your-git-SSH-keys"><a href="#Adding-your-SSH-public-key-to-your-git-SSH-keys" class="headerlink" title="Adding your SSH public key to your git SSH keys"></a>Adding your SSH public key to your git SSH keys</h3><p>1.Log your git account in, and click your avatar. Then, click <code>Setting</code> and find <code>SSH and GPG keys</code>.</p>
<p>2.Click <code>New SSH key</code>, copy your SSH public key in <code>Key</code> input area, and give this SSH key name in <code>Title</code> input area.</p>
<h3 id="Checking-your-connection"><a href="#Checking-your-connection" class="headerlink" title="Checking your connection"></a>Checking your connection</h3><p>Enter the following code to check whether you access to github successfully:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh git@github.com</div></pre></td></tr></table></figure>
<p>You will see:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></div><div class="line">    RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class="line">    Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure>
<p>Enter <code>Yes</code>, you will see:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi your name! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure>
<p>If you see above code, that indicates you have accessed github successfully!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Preamble&quot;&gt;&lt;a href=&quot;#Preamble&quot; class=&quot;headerlink&quot; title=&quot;Preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h2&gt;&lt;p&gt;Setting up Git can be tricky on Windows compared to Linux or Mac, but if you follow the steps in this guide, you should have no problems using Git on Windows. This guide will take you through the steps to install and configure Git and connect it to remote repositories to clone, push, and pull. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://xijunlee.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>爬虫练手(一)：爬下新浪爱问所有问题！</title>
    <link href="https://xijunlee.github.io/2017/02/16/%E7%88%AC%E8%99%AB%E7%BB%83%E6%89%8B%E4%B8%80%EF%BC%9A%E7%88%AC%E4%B8%8B%E6%96%B0%E6%B5%AA%E7%88%B1%E9%97%AE%E6%89%80%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%81/"/>
    <id>https://xijunlee.github.io/2017/02/16/爬虫练手一：爬下新浪爱问所有问题！/</id>
    <published>2017-02-16T07:33:43.000Z</published>
    <updated>2017-11-06T14:11:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>老早就想写爬虫了，只奈何以前总是空有一颗写爬虫的心。很多事情不可能全部都准备好才动手做，而是在边做的过程中边学。看着<a href="http://cuiqingcai.com/1052.html" target="_blank" rel="external">大神的博客</a>，学了五天，写了几个小demo，遂准备自己动手从头写一个爬虫来练手。这篇博文不是教程，相当于一个<code>readme</code>文档吧。</p>
<h2 id="爬的对象-–-新浪爱问"><a href="#爬的对象-–-新浪爱问" class="headerlink" title="爬的对象 – 新浪爱问"></a>爬的对象 – 新浪爱问</h2><p>选择<a href="http://iask.sina.com.cn" target="_blank" rel="external">新浪爱问</a>作为爬虫对象的原因如下：</p>
<ol>
<li>大神博客中虽然有对该网站爬的教程，但是因为网站改版了，大神的正则表达式代码失效，很多读者都在求代码。既然没人来做，那就我来做好了；</li>
<li>这个网站比较简单，不需要密码登录验证，不反爬虫。这对于我这么一个爬虫新手，是相当友好的练手对象。</li>
</ol>
<a id="more"></a>
<h2 id="爬的目标"><a href="#爬的目标" class="headerlink" title="爬的目标"></a>爬的目标</h2><p>爱问某一个专题下所有问题，以及问题下的最佳答案（当然，有的问题也可能没有最佳答案）</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我是用<code>python</code>实现的这个爬虫（人生苦短，我用python。实现起来真是高效到没朋友）</p>
<h3 id="需要挖掘的部分"><a href="#需要挖掘的部分" class="headerlink" title="需要挖掘的部分"></a>需要挖掘的部分</h3><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/iask_spider/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-16%2015.56.22.png">
<p>从上图可以看出，我必须要挖出来的有两部分：<code>每一页的链接</code>，<code>每一页的所有问题</code>。进一步延伸，在爬下每一页的某一个问题后，要进入该问题详情页面中将最佳答案的内容爬下来。</p>
<h3 id="使用的库"><a href="#使用的库" class="headerlink" title="使用的库"></a>使用的库</h3><ol>
<li><p><code>urllib</code> &amp; <code>urllib2</code> – 这两个库是用来访问网页获得网页源码的，具体使用方法见最后的代码或者官方文档。</p>
</li>
<li><p><code>re</code> &amp; <code>bs4</code> – 这两个库用来解析网页源码，挖出我所需要的<code>每一页的链接</code>，<code>每一页的所有问题</code></p>
</li>
</ol>
<h3 id="具体实现的几个重要函数"><a href="#具体实现的几个重要函数" class="headerlink" title="具体实现的几个重要函数"></a>具体实现的几个重要函数</h3><p>一、获得网页源码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#传入url，获取该页的代码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(self,pageStr)</span>:</span></div><div class="line"></div><div class="line">   	<span class="keyword">try</span>:</div><div class="line">      		url = self.baseURL + pageStr</div><div class="line">       	request = urllib2.Request(url)</div><div class="line">       	response = urllib2.urlopen(request)</div><div class="line">       	<span class="keyword">return</span> response</div><div class="line">   	<span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">       	<span class="keyword">if</span> hasattr(e,<span class="string">"reason"</span>):</div><div class="line">        		<span class="keyword">print</span> <span class="string">u"连接新浪爱问失败,错误原因"</span>,e.reason</div><div class="line">           	<span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>上述代码中，<code>baseURL</code>是新浪爱问的基地址，需要初始化实例的过程中传入，<code>pageStr</code>是待访问页面的定位符。<code>baseURL+pageStr</code>即为页面最终的网址。我之所以这么做，是因为该网站下所有网页都是有一个相同的基地址<code>baseURL</code>，而不同的专题页面都有不同的定位符<code>pageStr</code>。</p>
<p>二、解析网页源码中的链接</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getContent</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">   	<span class="comment">#获得起始页的源码</span></div><div class="line">   	</div><div class="line">   	<span class="comment">#page = self.getPage(self.startPage).read().decode("utf-8")</span></div><div class="line">   	page = self.getPage(self.startPage).read()</div><div class="line">   	<span class="comment">#pdb.set_trace()</span></div><div class="line"></div><div class="line">   	<span class="comment">#获得1-100页的源码</span></div><div class="line">   	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,self.endNum):</div><div class="line">   		<span class="keyword">print</span> (<span class="string">"正在获得第%d页的源码..."</span> %(i))</div><div class="line">   		self.file.write(<span class="string">"第%d页的问题\n"</span> %(i))</div><div class="line">   		<span class="comment">#解析当前页源码</span></div><div class="line">   		soup = BeautifulSoup(page,<span class="string">"lxml"</span>)</div><div class="line">   		<span class="comment">#获得当前页的地址</span></div><div class="line">   		current = soup.find(<span class="string">"a"</span>, string=i)</div><div class="line">   		<span class="comment">#获得当前页的问题</span></div><div class="line">   		questions = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'question-title'</span>)</div><div class="line">   		<span class="comment">#处理当前页的问题</span></div><div class="line">   		<span class="keyword">print</span> (<span class="string">"正在处理第%d页的问题..."</span> %(i))</div><div class="line">   		self.handleQuestions(questions)</div><div class="line">   		</div><div class="line">   		<span class="comment">#处理完当前页，跳到下一页</span></div><div class="line">   		page = self.getPage(current[<span class="string">'href'</span>]).read()</div><div class="line">   		</div><div class="line">   	self.file.close()</div></pre></td></tr></table></figure>
<p>我利用<code>beautiful soup</code>来帮助解析获得当前页的链接，这个需要观察网页源码的代码特征，才能利用<code>beautiful soup</code>完成这一工作。</p>
<p>三、解析网页源码中的问题内容以及可能的最佳答案</p>
<p>前面已经利用<code>beautiful soup</code>提取出网页中的问题，现在进入问题详情页面，利用正则表达式来提取出网页源码中的问题内容和可能的最佳答案。说具题外话虽然是匹配出来了，但是我觉着我对正则表达式的理解还是很浅，还是需要多练。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleQuestions</span><span class="params">(self,questions)</span>:</span></div><div class="line"></div><div class="line">   	<span class="comment">#处理questions中的每一个question</span></div><div class="line">   	<span class="keyword">for</span> question <span class="keyword">in</span> questions:</div><div class="line">   			<span class="keyword">for</span> a <span class="keyword">in</span> question.children:</div><div class="line">   				aString = str(a).strip()</div><div class="line">   				pattern = re.compile(<span class="string">'&lt;a href="(.*?)".*?&gt;(.*?)&lt;/a&gt;'</span>,re.S)</div><div class="line">   				check = re.search(pattern,aString)</div><div class="line">   				<span class="keyword">if</span> check:</div><div class="line">   					items = re.findall(pattern,aString)</div><div class="line">   					<span class="comment">#获得问题详情链接和问题内容</span></div><div class="line">   					item = items[<span class="number">0</span>]</div><div class="line">   					href = item[<span class="number">0</span>]</div><div class="line">   					questionStr = item[<span class="number">1</span>]</div><div class="line">   					</div><div class="line">   					ansPage = self.getPage(href).read()</div><div class="line">   					ansStr = self.getAnswer(ansPage)</div><div class="line"></div><div class="line">   					self.file.write(<span class="string">"Q:"</span>+questionStr+<span class="string">"\n"</span>)</div><div class="line">   					self.file.write(<span class="string">"A:"</span>+ansStr+<span class="string">"\n\n"</span>)</div><div class="line">   				</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">getAnswer</span><span class="params">(self,page)</span>:</span></div><div class="line">   	pattern = re.compile(<span class="string">'&lt;div class="good_answer.*?&lt;div&gt;.*?&lt;span&gt;(.*?)&lt;/span&gt;'</span>,re.S)</div><div class="line">   	check = re.search(pattern,page)</div><div class="line">   	ansStr = <span class="string">''</span></div><div class="line">   	<span class="keyword">if</span> check:</div><div class="line">   		items = re.findall(pattern,page)</div><div class="line">   		ansStr = self.formatTool.replace(items[<span class="number">0</span>])</div><div class="line">   	</div><div class="line">   	<span class="keyword">return</span> ansStr</div></pre></td></tr></table></figure>
<p>四、格式处理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormatTool</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">		self.removeIMG = re.compile(<span class="string">'&lt;img.*?&gt;'</span>,re.S)</div><div class="line">		self.removeBR = re.compile(<span class="string">'&lt;br&gt;|&lt;br/&gt;'</span>,re.S)</div><div class="line">		self.removeBP = re.compile(<span class="string">' &#123;7&#125;'</span>,re.S)</div><div class="line">		self.removeLink = re.compile(<span class="string">'&lt;a.*?&gt;.*?&lt;/a&gt;'</span>,re.S)</div><div class="line">		self.removeDIV = re.compile(<span class="string">'&lt;div.*?&gt;.*?&lt;/div&gt;'</span>,re.S)</div><div class="line">		self.removePre1 = re.compile(<span class="string">'&lt;pre&gt;'</span>,re.S)</div><div class="line">		self.removePre2 = re.compile(<span class="string">'&lt;/pre&gt;'</span>,re.S)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">replace</span><span class="params">(self,content)</span>:</span></div><div class="line"></div><div class="line">		content = re.sub(self.removeBR,<span class="string">"\n"</span>,content)</div><div class="line">		content = re.sub(self.removeLink,<span class="string">""</span>,content)</div><div class="line">		content = re.sub(self.removeDIV,<span class="string">""</span>,content)</div><div class="line">		content = re.sub(self.removePre1,<span class="string">""</span>,content)</div><div class="line">		content = re.sub(self.removePre2,<span class="string">""</span>,content)</div><div class="line"></div><div class="line">		<span class="keyword">return</span> content.strip()</div></pre></td></tr></table></figure>
<p>前面利用正则表达式匹配出的问题内容和答案中，可能还会存在一些链接和图片的代码，需要再次利用正则表达式来剔除，使格式变得更好看。</p>
<h2 id="代码以及部分结果"><a href="#代码以及部分结果" class="headerlink" title="代码以及部分结果"></a>代码以及部分结果</h2><p>我挖到的结果部分展示如下:(<a href="https://github.com/xijunlee/PythonSpider/blob/master/iask_question_and_answer.txt" target="_blank" rel="external">完整结果戳这里，虽然应该是没什么卵用</a>)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">第<span class="number">1</span>页的问题</div><div class="line">Q:怎样下载真实的宜聚网</div><div class="line">A:可以去官网、V信或者APP Store。</div><div class="line"></div><div class="line">Q:请问深圳超算中心测试云的信息评测主要包括哪些呢？</div><div class="line">A:主要包括业主方项目验收；</div><div class="line">基金项目验收；</div><div class="line">科研项目验收；</div><div class="line">全流程测试；</div><div class="line">系统安全检查；</div><div class="line">系统性能测试</div><div class="line"></div><div class="line">Q:宜聚网和钻库网谁更出色</div><div class="line">A:宜聚网是专注车贷的，所以我觉得它可能好一点，实物抵押安全性高，加上收益也还不错。</div><div class="line"></div><div class="line">Q:有人了解现在的一元云购平台吗？那个比较好呢？</div><div class="line">A:星喜夺宝很好，这是由深圳市星喜夺宝网络科技有限公司注入巨资打造的新型购物平台，实力非常的雄厚，提供的奖品非常的丰富高端。</div><div class="line"></div><div class="line">Q: 	WILO威乐天猫有他们的旗舰店吗？ </div><div class="line">A:有的有促销活动呢  </div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">Q:听朋友说vipabc在网上注册就会送很多好东西？</div><div class="line">真的吗？现在还有这种活动吗？ </div><div class="line">A:vipabc经常会搞一些这类活动，只要在网上报名，免费试听一节体验课程，就有机会获得各种奖品，让大家一边了解vipabc的教学模式，一边还能获得更多奖品和实惠，一举多得。</div><div class="line"></div><div class="line">Q:长城厨电和长城电脑的关系，你们知道吗？</div><div class="line">A:关系很简单，就是都属于用长城这个民族品牌的国有控股企业，家里的燃气灶就是长城厨电的产品，真的是很好用。 </div><div class="line"></div><div class="line">....</div><div class="line"></div><div class="line">Q:Html5 Canvas是做什么的，清除屏幕可以做吗?</div><div class="line">A:“在粤嵌的学习中，我们需要清除部分或者全部的屏幕，类似于j2me的setcilp函数，在html </div><div class="line">canvas中有两种方法可以清除屏幕，一种是clearRect和整个屏幕宽度高度技巧。不同的是clearRect可以实现部分的屏幕的清除也可以实现清除全屏的方法，而重设屏幕宽高只能清除部分的屏幕。“ </div><div class="line"></div><div class="line">....</div></pre></td></tr></table></figure>
<p>最后还是采用面向对象的编程风格整理了所有实现代码，如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> pdb</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IASKSpider</span>:</span></div><div class="line"> </div><div class="line">    <span class="comment">#初始化，传入基地址和开始页</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,baseUrl,startPage,endNum)</span>:</span></div><div class="line"></div><div class="line">        self.baseURL = baseUrl</div><div class="line">        self.startPage = startPage</div><div class="line">        self.formatTool = FormatTool()</div><div class="line">   </div><div class="line">        self.endNum = endNum</div><div class="line">        self.file = open(<span class="string">"iask_question_and_answer.txt"</span>,<span class="string">'w+'</span>)</div><div class="line"></div><div class="line">    <span class="comment">#传入url，获取该页的代码</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(self,pageStr)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            url = self.baseURL + pageStr</div><div class="line">            request = urllib2.Request(url)</div><div class="line">            response = urllib2.urlopen(request)</div><div class="line">            <span class="comment">#print response.read()</span></div><div class="line">            <span class="keyword">return</span> response</div><div class="line">        <span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">            <span class="keyword">if</span> hasattr(e,<span class="string">"reason"</span>):</div><div class="line">                <span class="keyword">print</span> <span class="string">u"连接新浪爱问失败,错误原因"</span>,e.reason</div><div class="line">                <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getContent</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">    	<span class="comment">#获得起始页的源码</span></div><div class="line">    	</div><div class="line">    	<span class="comment">#page = self.getPage(self.startPage).read().decode("utf-8")</span></div><div class="line">    	page = self.getPage(self.startPage).read()</div><div class="line">    	<span class="comment">#pdb.set_trace()</span></div><div class="line"></div><div class="line">    	<span class="comment">#获得1-100页的源码</span></div><div class="line">    	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,self.endNum):</div><div class="line">    		<span class="keyword">print</span> (<span class="string">"正在获得第%d页的源码..."</span> %(i))</div><div class="line">    		self.file.write(<span class="string">"第%d页的问题\n"</span> %(i))</div><div class="line">    		<span class="comment">#解析当前页源码</span></div><div class="line">    		soup = BeautifulSoup(page,<span class="string">"lxml"</span>)</div><div class="line">    		<span class="comment">#获得当前页的地址</span></div><div class="line">    		current = soup.find(<span class="string">"a"</span>, string=i)</div><div class="line">    		<span class="comment">#获得当前页的问题</span></div><div class="line">    		questions = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'question-title'</span>)</div><div class="line">    		<span class="comment">#处理当前页的问题</span></div><div class="line">    		<span class="keyword">print</span> (<span class="string">"正在处理第%d页的问题..."</span> %(i))</div><div class="line">    		self.handleQuestions(questions)</div><div class="line">    		</div><div class="line">    		<span class="comment">#处理完当前页，跳到下一页</span></div><div class="line">    		page = self.getPage(current[<span class="string">'href'</span>]).read()</div><div class="line">    		</div><div class="line">    	self.file.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleQuestions</span><span class="params">(self,questions)</span>:</span></div><div class="line"></div><div class="line">    	<span class="comment">#处理questions中的每一个question</span></div><div class="line">    	<span class="keyword">for</span> question <span class="keyword">in</span> questions:</div><div class="line">    			<span class="keyword">for</span> a <span class="keyword">in</span> question.children:</div><div class="line">    				aString = str(a).strip()</div><div class="line">    				pattern = re.compile(<span class="string">'&lt;a href="(.*?)".*?&gt;(.*?)&lt;/a&gt;'</span>,re.S)</div><div class="line">    				check = re.search(pattern,aString)</div><div class="line">    				<span class="keyword">if</span> check:</div><div class="line">    					items = re.findall(pattern,aString)</div><div class="line">    					<span class="comment">#获得问题详情链接和问题内容</span></div><div class="line">    					item = items[<span class="number">0</span>]</div><div class="line">    					href = item[<span class="number">0</span>]</div><div class="line">    					questionStr = item[<span class="number">1</span>]</div><div class="line">    					</div><div class="line">    					ansPage = self.getPage(href).read()</div><div class="line">    					ansStr = self.getAnswer(ansPage)</div><div class="line"></div><div class="line">    					self.file.write(<span class="string">"Q:"</span>+questionStr+<span class="string">"\n"</span>)</div><div class="line">    					self.file.write(<span class="string">"A:"</span>+ansStr+<span class="string">"\n\n"</span>)</div><div class="line">    				</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAnswer</span><span class="params">(self,page)</span>:</span></div><div class="line">    	pattern = re.compile(<span class="string">'&lt;div class="good_answer.*?&lt;div&gt;.*?&lt;span&gt;(.*?)&lt;/span&gt;'</span>,re.S)</div><div class="line">    	check = re.search(pattern,page)</div><div class="line">    	ansStr = <span class="string">''</span></div><div class="line">    	<span class="keyword">if</span> check:</div><div class="line">    		items = re.findall(pattern,page)</div><div class="line">    		ansStr = self.formatTool.replace(items[<span class="number">0</span>])</div><div class="line">    	</div><div class="line">    	<span class="keyword">return</span> ansStr</div><div class="line"></div><div class="line">   </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormatTool</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line"></div><div class="line">		self.removeIMG = re.compile(<span class="string">'&lt;img.*?&gt;'</span>,re.S)</div><div class="line">		self.removeBR = re.compile(<span class="string">'&lt;br&gt;|&lt;br/&gt;'</span>,re.S)</div><div class="line">		self.removeBP = re.compile(<span class="string">' &#123;7&#125;'</span>,re.S)</div><div class="line">		self.removeLink = re.compile(<span class="string">'&lt;a.*?&gt;.*?&lt;/a&gt;'</span>,re.S)</div><div class="line">		self.removeDIV = re.compile(<span class="string">'&lt;div.*?&gt;.*?&lt;/div&gt;'</span>,re.S)</div><div class="line">		self.removePre1 = re.compile(<span class="string">'&lt;pre&gt;'</span>,re.S)</div><div class="line">		self.removePre2 = re.compile(<span class="string">'&lt;/pre&gt;'</span>,re.S)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">replace</span><span class="params">(self,content)</span>:</span></div><div class="line"></div><div class="line">		content = re.sub(self.removeBR,<span class="string">"\n"</span>,content)</div><div class="line">		content = re.sub(self.removeLink,<span class="string">""</span>,content)</div><div class="line">		content = re.sub(self.removeDIV,<span class="string">""</span>,content)</div><div class="line">		content = re.sub(self.removePre1,<span class="string">""</span>,content)</div><div class="line">		content = re.sub(self.removePre2,<span class="string">""</span>,content)</div><div class="line"></div><div class="line">		<span class="keyword">return</span> content.strip()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">	baseURL = <span class="string">'http://iask.sina.com.cn'</span></div><div class="line">	startPage = <span class="string">'/c/74-all-1-new.html'</span></div><div class="line">	iaskSpider = IASKSpider(baseURL,startPage,<span class="number">101</span>)</div><div class="line">	iaskSpider.getContent()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;老早就想写爬虫了，只奈何以前总是空有一颗写爬虫的心。很多事情不可能全部都准备好才动手做，而是在边做的过程中边学。看着&lt;a href=&quot;http://cuiqingcai.com/1052.html&quot;&gt;大神的博客&lt;/a&gt;，学了五天，写了几个小demo，遂准备自己动手从头写一个爬虫来练手。这篇博文不是教程，相当于一个&lt;code&gt;readme&lt;/code&gt;文档吧。&lt;/p&gt;
&lt;h2 id=&quot;爬的对象-–-新浪爱问&quot;&gt;&lt;a href=&quot;#爬的对象-–-新浪爱问&quot; class=&quot;headerlink&quot; title=&quot;爬的对象 – 新浪爱问&quot;&gt;&lt;/a&gt;爬的对象 – 新浪爱问&lt;/h2&gt;&lt;p&gt;选择&lt;a href=&quot;http://iask.sina.com.cn&quot;&gt;新浪爱问&lt;/a&gt;作为爬虫对象的原因如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大神博客中虽然有对该网站爬的教程，但是因为网站改版了，大神的正则表达式代码失效，很多读者都在求代码。既然没人来做，那就我来做好了；&lt;/li&gt;
&lt;li&gt;这个网站比较简单，不需要密码登录验证，不反爬虫。这对于我这么一个爬虫新手，是相当友好的练手对象。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://xijunlee.github.io/tags/Python/"/>
    
      <category term="Spider" scheme="https://xijunlee.github.io/tags/Spider/"/>
    
  </entry>
  
</feed>
